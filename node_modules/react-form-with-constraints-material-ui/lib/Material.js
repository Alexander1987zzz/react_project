import * as React from 'react';
import { createMuiTheme, createStyles, FormControl as _FormControl, TextField as _TextField, withStyles } from '@material-ui/core';
import { ThemeProvider } from '@material-ui/styles';
import * as PropTypes from 'prop-types';
import { assert, Async, deepForEach, FieldFeedback as _FieldFeedback, FieldFeedbacks, FormWithConstraints as _FormWithConstraints } from 'react-form-with-constraints';
export class FormControl extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            field: undefined
        };
        this.fieldWillValidate = (fieldName) => {
            if (fieldName === this.getAssociatedFieldName()) {
                this.setState({ field: undefined });
            }
        };
        this.fieldDidValidate = (field) => {
            if (field.name === this.getAssociatedFieldName()) {
                this.setState({ field });
            }
        };
        this.fieldDidReset = (field) => {
            if (field.name === this.getAssociatedFieldName()) {
                this.setState({ field: undefined });
            }
        };
    }
    componentDidMount() {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    }
    componentWillUnmount() {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    }
    getAssociatedFieldName() {
        const fieldNames = new Set();
        deepForEach(this.props.children, child => {
            if (child.props !== undefined) {
                const fieldName = child.props.name;
                if (fieldName !== undefined && fieldName.length > 0) {
                    fieldNames.add(fieldName);
                }
            }
        });
        assert(fieldNames.size === 1, `0 or multiple [name="*"] instead of 1: '${Array.from(fieldNames)}'`);
        return fieldNames.values().next().value;
    }
    render() {
        const { field } = this.state;
        const error = field !== undefined && field.hasErrors();
        return React.createElement(_FormControl, Object.assign({ error: error }, this.props));
    }
}
FormControl.contextTypes = {
    form: PropTypes.instanceOf(_FormWithConstraints).isRequired
};
export class TextField extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            field: undefined
        };
        this.fieldWillValidate = (fieldName) => {
            if (fieldName === this.props.name) {
                this.setState({ field: undefined });
            }
        };
        this.fieldDidValidate = (field) => {
            if (field.name === this.props.name) {
                this.setState({ field });
            }
        };
        this.fieldDidReset = (field) => {
            if (field.name === this.props.name) {
                this.setState({ field: undefined });
            }
        };
    }
    componentDidMount() {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    }
    componentWillUnmount() {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    }
    render() {
        const { field } = this.state;
        const error = field !== undefined && field.hasErrors();
        return React.createElement(_TextField, Object.assign({ error: error }, this.props));
    }
}
TextField.contextTypes = {
    form: PropTypes.instanceOf(_FormWithConstraints).isRequired
};
const defaultTheme = createMuiTheme({});
function formWithConstraintsTheme(outerTheme) {
    return {
        ...(outerTheme || defaultTheme),
        overrides: {
            MuiFormHelperText: {
                root: {
                    '&:empty': {
                        marginTop: 0,
                        minHeight: 0
                    }
                }
            }
        }
    };
}
export class FormWithConstraints extends _FormWithConstraints {
    render() {
        return React.createElement(ThemeProvider, { theme: formWithConstraintsTheme }, super.render());
    }
}
function fieldFeedbackStyles(theme) {
    return createStyles({
        root: {
            '&:not(:last-child)': {
                marginBottom: theme.spacing()
            }
        }
    });
}
export const FieldFeedback = withStyles(fieldFeedbackStyles)(class FieldFeedbackWS extends React.PureComponent {
    render() {
        const { classes, className, ...otherProps } = this.props;
        const classNames = className !== undefined ? `${className} ${classes.root}` : classes.root;
        return React.createElement(_FieldFeedback, Object.assign({ className: classNames }, otherProps));
    }
});
export { FieldFeedbacks, Async };
//# sourceMappingURL=Material.js.map