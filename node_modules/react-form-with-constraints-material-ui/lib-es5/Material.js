"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Async = exports.FieldFeedbacks = exports.FieldFeedback = exports.FormWithConstraints = exports.TextField = exports.FormControl = void 0;
var React = require("react");
var core_1 = require("@material-ui/core");
var styles_1 = require("@material-ui/styles");
var PropTypes = require("prop-types");
var react_form_with_constraints_1 = require("react-form-with-constraints");
Object.defineProperty(exports, "Async", { enumerable: true, get: function () { return react_form_with_constraints_1.Async; } });
Object.defineProperty(exports, "FieldFeedbacks", { enumerable: true, get: function () { return react_form_with_constraints_1.FieldFeedbacks; } });
var FormControl = (function (_super) {
    __extends(FormControl, _super);
    function FormControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            field: undefined
        };
        _this.fieldWillValidate = function (fieldName) {
            if (fieldName === _this.getAssociatedFieldName()) {
                _this.setState({ field: undefined });
            }
        };
        _this.fieldDidValidate = function (field) {
            if (field.name === _this.getAssociatedFieldName()) {
                _this.setState({ field: field });
            }
        };
        _this.fieldDidReset = function (field) {
            if (field.name === _this.getAssociatedFieldName()) {
                _this.setState({ field: undefined });
            }
        };
        return _this;
    }
    FormControl.prototype.componentDidMount = function () {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    };
    FormControl.prototype.componentWillUnmount = function () {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    };
    FormControl.prototype.getAssociatedFieldName = function () {
        var fieldNames = new Set();
        react_form_with_constraints_1.deepForEach(this.props.children, function (child) {
            if (child.props !== undefined) {
                var fieldName = child.props.name;
                if (fieldName !== undefined && fieldName.length > 0) {
                    fieldNames.add(fieldName);
                }
            }
        });
        react_form_with_constraints_1.assert(fieldNames.size === 1, "0 or multiple [name=\"*\"] instead of 1: '" + Array.from(fieldNames) + "'");
        return fieldNames.values().next().value;
    };
    FormControl.prototype.render = function () {
        var field = this.state.field;
        var error = field !== undefined && field.hasErrors();
        return React.createElement(core_1.FormControl, __assign({ error: error }, this.props));
    };
    FormControl.contextTypes = {
        form: PropTypes.instanceOf(react_form_with_constraints_1.FormWithConstraints).isRequired
    };
    return FormControl;
}(React.Component));
exports.FormControl = FormControl;
var TextField = (function (_super) {
    __extends(TextField, _super);
    function TextField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            field: undefined
        };
        _this.fieldWillValidate = function (fieldName) {
            if (fieldName === _this.props.name) {
                _this.setState({ field: undefined });
            }
        };
        _this.fieldDidValidate = function (field) {
            if (field.name === _this.props.name) {
                _this.setState({ field: field });
            }
        };
        _this.fieldDidReset = function (field) {
            if (field.name === _this.props.name) {
                _this.setState({ field: undefined });
            }
        };
        return _this;
    }
    TextField.prototype.componentDidMount = function () {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    };
    TextField.prototype.componentWillUnmount = function () {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    };
    TextField.prototype.render = function () {
        var field = this.state.field;
        var error = field !== undefined && field.hasErrors();
        return React.createElement(core_1.TextField, __assign({ error: error }, this.props));
    };
    TextField.contextTypes = {
        form: PropTypes.instanceOf(react_form_with_constraints_1.FormWithConstraints).isRequired
    };
    return TextField;
}(React.Component));
exports.TextField = TextField;
var defaultTheme = core_1.createMuiTheme({});
function formWithConstraintsTheme(outerTheme) {
    return __assign(__assign({}, (outerTheme || defaultTheme)), { overrides: {
            MuiFormHelperText: {
                root: {
                    '&:empty': {
                        marginTop: 0,
                        minHeight: 0
                    }
                }
            }
        } });
}
var FormWithConstraints = (function (_super) {
    __extends(FormWithConstraints, _super);
    function FormWithConstraints() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormWithConstraints.prototype.render = function () {
        return React.createElement(styles_1.ThemeProvider, { theme: formWithConstraintsTheme }, _super.prototype.render.call(this));
    };
    return FormWithConstraints;
}(react_form_with_constraints_1.FormWithConstraints));
exports.FormWithConstraints = FormWithConstraints;
function fieldFeedbackStyles(theme) {
    return core_1.createStyles({
        root: {
            '&:not(:last-child)': {
                marginBottom: theme.spacing()
            }
        }
    });
}
exports.FieldFeedback = core_1.withStyles(fieldFeedbackStyles)((function (_super) {
    __extends(FieldFeedbackWS, _super);
    function FieldFeedbackWS() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldFeedbackWS.prototype.render = function () {
        var _a = this.props, classes = _a.classes, className = _a.className, otherProps = __rest(_a, ["classes", "className"]);
        var classNames = className !== undefined ? className + " " + classes.root : classes.root;
        return React.createElement(react_form_with_constraints_1.FieldFeedback, __assign({ className: classNames }, otherProps));
    };
    return FieldFeedbackWS;
}(React.PureComponent)));
//# sourceMappingURL=Material.js.map