{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { FormWithConstraints } from './FormWithConstraints';\nexport class Input extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      field: undefined\n    };\n\n    this.fieldWillValidate = fieldName => {\n      if (fieldName === this.props.name) {\n        this.setState({\n          field: 'pending'\n        });\n      }\n    };\n\n    this.fieldDidValidate = field => {\n      if (field.name === this.props.name) {\n        this.setState({\n          field\n        });\n      }\n    };\n\n    this.fieldDidReset = field => {\n      if (field.name === this.props.name) {\n        this.setState({\n          field: undefined\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  fieldValidationStates() {\n    const {\n      field\n    } = this.state;\n    const states = [];\n\n    if (field !== undefined) {\n      if (field === 'pending') {\n        states.push('isPending');\n      } else {\n        if (field.hasErrors()) states.push('hasErrors');\n        if (field.hasWarnings()) states.push('hasWarnings');\n        if (field.hasInfos()) states.push('hasInfos');\n        if (field.isValid()) states.push('isValid');\n      }\n    }\n\n    return states;\n  }\n\n  render() {\n    const {\n      innerRef,\n      className,\n      classes,\n      ...inputProps\n    } = this.props;\n    const validationStates = this.fieldValidationStates();\n    let classNames = className;\n    validationStates.forEach(validationState => {\n      const tmp = classes[validationState];\n\n      if (tmp !== undefined) {\n        if (classNames !== undefined) {\n          classNames += ` ${tmp}`;\n        } else {\n          classNames = tmp;\n        }\n      }\n    });\n    return React.createElement(\"input\", Object.assign({\n      ref: innerRef\n    }, inputProps, {\n      className: classNames\n    }));\n  }\n\n}\nInput.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired\n};\nInput.defaultProps = {\n  classes: {\n    isPending: 'is-pending',\n    hasErrors: 'has-errors',\n    hasWarnings: 'has-warnings',\n    hasInfos: 'has-infos',\n    isValid: 'is-valid'\n  }\n};","map":{"version":3,"sources":["../src/Input.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { Field } from './Field';\nimport { FormWithConstraints, FormWithConstraintsChildContext } from './FormWithConstraints';\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  innerRef?: React.Ref<HTMLInputElement>;\n  classes: {\n    [index: string]: string | undefined;\n    isPending?: string;\n    hasErrors?: string;\n    hasWarnings?: string;\n    hasInfos?: string;\n    isValid?: string;\n  };\n}\n\ninterface InputState {\n  field: undefined | 'pending' | Field;\n}\n\nexport type InputContext = FormWithConstraintsChildContext;\n\nexport class Input extends React.Component<InputProps, InputState> {\n  static contextTypes: React.ValidationMap<InputContext> = {\n    form: PropTypes.instanceOf(FormWithConstraints).isRequired\n  };\n  context!: InputContext;\n\n  static defaultProps: InputProps = {\n    classes: {\n      isPending: 'is-pending',\n      hasErrors: 'has-errors',\n      hasWarnings: 'has-warnings',\n      hasInfos: 'has-infos',\n      isValid: 'is-valid'\n    }\n  };\n\n  state: InputState = {\n    field: undefined\n  };\n\n  /* eslint-disable react/destructuring-assignment */\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  fieldWillValidate = (fieldName: string) => {\n    // Ignore the event if it's not for us\n    if (fieldName === this.props.name) {\n      this.setState({ field: 'pending' });\n    }\n  };\n\n  fieldDidValidate = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.props.name) {\n      this.setState({ field });\n    }\n  };\n\n  fieldDidReset = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.props.name) {\n      this.setState({ field: undefined });\n    }\n  };\n\n  /* eslint-enable react/destructuring-assignment */\n\n  fieldValidationStates() {\n    const { field } = this.state;\n\n    const states = [];\n\n    if (field !== undefined) {\n      if (field === 'pending') {\n        states.push('isPending');\n      } else {\n        if (field.hasErrors()) states.push('hasErrors');\n        if (field.hasWarnings()) states.push('hasWarnings');\n        if (field.hasInfos()) states.push('hasInfos');\n        if (field.isValid()) states.push('isValid');\n      }\n    }\n\n    return states;\n  }\n\n  render() {\n    const { innerRef, className, classes, ...inputProps } = this.props;\n    const validationStates = this.fieldValidationStates();\n\n    let classNames = className;\n    validationStates.forEach(validationState => {\n      const tmp = classes![validationState];\n      if (tmp !== undefined) {\n        if (classNames !== undefined) {\n          classNames += ` ${tmp}`;\n        } else {\n          classNames = tmp;\n        }\n      }\n    });\n\n    return <input ref={innerRef} {...inputProps} className={classNames} />;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}