{"ast":null,"code":"import * as React from 'react';\nimport { createMuiTheme, createStyles, FormControl as _FormControl, TextField as _TextField, withStyles } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport * as PropTypes from 'prop-types';\nimport { assert, Async, deepForEach, FieldFeedback as _FieldFeedback, FieldFeedbacks, FormWithConstraints as _FormWithConstraints } from 'react-form-with-constraints';\nexport class FormControl extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      field: undefined\n    };\n\n    this.fieldWillValidate = fieldName => {\n      if (fieldName === this.getAssociatedFieldName()) {\n        this.setState({\n          field: undefined\n        });\n      }\n    };\n\n    this.fieldDidValidate = field => {\n      if (field.name === this.getAssociatedFieldName()) {\n        this.setState({\n          field\n        });\n      }\n    };\n\n    this.fieldDidReset = field => {\n      if (field.name === this.getAssociatedFieldName()) {\n        this.setState({\n          field: undefined\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  getAssociatedFieldName() {\n    const fieldNames = new Set();\n    deepForEach(this.props.children, child => {\n      if (child.props !== undefined) {\n        const fieldName = child.props.name;\n\n        if (fieldName !== undefined && fieldName.length > 0) {\n          fieldNames.add(fieldName);\n        }\n      }\n    });\n    assert(fieldNames.size === 1, `0 or multiple [name=\"*\"] instead of 1: '${Array.from(fieldNames)}'`);\n    return fieldNames.values().next().value;\n  }\n\n  render() {\n    const {\n      field\n    } = this.state;\n    const error = field !== undefined && field.hasErrors();\n    return React.createElement(_FormControl, Object.assign({\n      error: error\n    }, this.props));\n  }\n\n}\nFormControl.contextTypes = {\n  form: PropTypes.instanceOf(_FormWithConstraints).isRequired\n};\nexport class TextField extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      field: undefined\n    };\n\n    this.fieldWillValidate = fieldName => {\n      if (fieldName === this.props.name) {\n        this.setState({\n          field: undefined\n        });\n      }\n    };\n\n    this.fieldDidValidate = field => {\n      if (field.name === this.props.name) {\n        this.setState({\n          field\n        });\n      }\n    };\n\n    this.fieldDidReset = field => {\n      if (field.name === this.props.name) {\n        this.setState({\n          field: undefined\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  render() {\n    const {\n      field\n    } = this.state;\n    const error = field !== undefined && field.hasErrors();\n    return React.createElement(_TextField, Object.assign({\n      error: error\n    }, this.props));\n  }\n\n}\nTextField.contextTypes = {\n  form: PropTypes.instanceOf(_FormWithConstraints).isRequired\n};\nconst defaultTheme = createMuiTheme({});\n\nfunction formWithConstraintsTheme(outerTheme) {\n  return { ...(outerTheme || defaultTheme),\n    overrides: {\n      MuiFormHelperText: {\n        root: {\n          '&:empty': {\n            marginTop: 0,\n            minHeight: 0\n          }\n        }\n      }\n    }\n  };\n}\n\nexport class FormWithConstraints extends _FormWithConstraints {\n  render() {\n    return React.createElement(ThemeProvider, {\n      theme: formWithConstraintsTheme\n    }, super.render());\n  }\n\n}\n\nfunction fieldFeedbackStyles(theme) {\n  return createStyles({\n    root: {\n      '&:not(:last-child)': {\n        marginBottom: theme.spacing()\n      }\n    }\n  });\n}\n\nexport const FieldFeedback = withStyles(fieldFeedbackStyles)(class FieldFeedbackWS extends React.PureComponent {\n  render() {\n    const {\n      classes,\n      className,\n      ...otherProps\n    } = this.props;\n    const classNames = className !== undefined ? `${className} ${classes.root}` : classes.root;\n    return React.createElement(_FieldFeedback, Object.assign({\n      className: classNames\n    }, otherProps));\n  }\n\n});\nexport { FieldFeedbacks, Async };","map":{"version":3,"sources":["../src/Material.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  createMuiTheme,\n  createStyles,\n  FormControl as _FormControl,\n  TextField as _TextField,\n  Theme,\n  WithStyles,\n  withStyles\n} from '@material-ui/core';\nimport { FormControlProps } from '@material-ui/core/FormControl';\nimport { TextFieldProps } from '@material-ui/core/TextField';\nimport { ThemeProvider } from '@material-ui/styles';\nimport * as PropTypes from 'prop-types';\nimport {\n  assert,\n  Async,\n  deepForEach,\n  Field,\n  FieldFeedback as _FieldFeedback,\n  FieldFeedbackBaseProps,\n  FieldFeedbacks,\n  FormWithConstraints as _FormWithConstraints,\n  FormWithConstraintsChildContext\n} from 'react-form-with-constraints';\n\ninterface FormControlState {\n  field: Field | undefined;\n}\n\ntype FormControlContext = FormWithConstraintsChildContext;\n\nexport class FormControl extends React.Component<FormControlProps, FormControlState> {\n  static contextTypes: React.ValidationMap<FormControlContext> = {\n    form: PropTypes.instanceOf(_FormWithConstraints).isRequired\n  };\n  context!: FormControlContext;\n\n  state: FormControlState = {\n    field: undefined\n  };\n\n  /* eslint-disable react/destructuring-assignment */\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  getAssociatedFieldName() {\n    const fieldNames = new Set<string>();\n\n    deepForEach(this.props.children, child => {\n      if (child.props !== undefined) {\n        const fieldName = child.props.name;\n        if (fieldName !== undefined && fieldName.length > 0) {\n          fieldNames.add(fieldName);\n        }\n      }\n    });\n\n    assert(\n      fieldNames.size === 1,\n      // [...Set] vs Array.from(Set): the latter doesn't need downlevelIteration with IE\n      // eslint-disable-next-line unicorn/prefer-spread\n      `0 or multiple [name=\"*\"] instead of 1: '${Array.from(fieldNames)}'`\n    );\n\n    // Return the first and only entry\n    return fieldNames.values().next().value;\n  }\n\n  /* eslint-enable react/destructuring-assignment */\n\n  fieldWillValidate = (fieldName: string) => {\n    // Ignore the event if it's not for us\n    if (fieldName === this.getAssociatedFieldName()) {\n      this.setState({ field: undefined });\n    }\n  };\n\n  fieldDidValidate = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.getAssociatedFieldName()) {\n      this.setState({ field });\n    }\n  };\n\n  fieldDidReset = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.getAssociatedFieldName()) {\n      this.setState({ field: undefined });\n    }\n  };\n\n  render() {\n    const { field } = this.state;\n    const error = field !== undefined && field.hasErrors();\n    return <_FormControl error={error} {...this.props} />;\n  }\n}\n\ninterface TextFieldState {\n  field: Field | undefined;\n}\n\nexport class TextField extends React.Component<TextFieldProps, TextFieldState> {\n  static contextTypes: React.ValidationMap<FormControlContext> = {\n    form: PropTypes.instanceOf(_FormWithConstraints).isRequired\n  };\n  context!: FormControlContext;\n\n  state: TextFieldState = {\n    field: undefined\n  };\n\n  /* eslint-disable react/destructuring-assignment */\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  fieldWillValidate = (fieldName: string) => {\n    // Ignore the event if it's not for us\n    if (fieldName === this.props.name) {\n      this.setState({ field: undefined });\n    }\n  };\n\n  fieldDidValidate = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.props.name) {\n      this.setState({ field });\n    }\n  };\n\n  fieldDidReset = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.props.name) {\n      this.setState({ field: undefined });\n    }\n  };\n\n  /* eslint-enable react/destructuring-assignment */\n\n  render() {\n    const { field } = this.state;\n    const error = field !== undefined && field.hasErrors();\n    return <_TextField error={error} {...this.props} />;\n  }\n}\n\nconst defaultTheme = createMuiTheme({});\n\n// https://v3-5-0.material-ui.com/customization/themes/#nesting-the-theme\nfunction formWithConstraintsTheme(outerTheme: Theme | null) {\n  return {\n    ...(outerTheme || defaultTheme),\n    overrides: {\n      MuiFormHelperText: {\n        root: {\n          // Make FormHelperText invisible when there is no content\n          // https://github.com/mui-org/material-ui/blob/v3.5.1/packages/material-ui/src/FormHelperText/FormHelperText.js#L14-L16\n          '&:empty': {\n            marginTop: 0,\n            minHeight: 0\n          }\n        }\n      }\n    }\n  };\n}\n\nexport class FormWithConstraints extends _FormWithConstraints {\n  render() {\n    return <ThemeProvider theme={formWithConstraintsTheme}>{super.render()}</ThemeProvider>;\n  }\n}\n\nfunction fieldFeedbackStyles(theme: Theme) {\n  return createStyles({\n    root: {\n      // Simulates FormHelperText margin\n      // https://github.com/mui-org/material-ui/blob/v1.0.0-beta.44/packages/material-ui/src/Form/FormHelperText.js#L12\n      '&:not(:last-child)': {\n        marginBottom: theme.spacing()\n      }\n    }\n  });\n}\n\ntype FieldFeedbackPropsWithStyles = FieldFeedbackBaseProps &\n  React.HTMLAttributes<HTMLSpanElement> &\n  WithStyles<typeof fieldFeedbackStyles>;\n\nexport const FieldFeedback = withStyles(fieldFeedbackStyles)(\n  // Without a class name (class extends React.Component) React Developer Tools displays:\n  // <WithStyles(Component) ...>\n  //   <Component>\n  //     <FieldFeedbackWS className=\"Component-root-125\" ...></FieldFeedback>\n  //   </Component>\n  // </WithStyles(Component)>\n  //\n  // With a class name React Developer Tools displays:\n  // <WithStyles(FieldFeedbackWS) ...>\n  //   <FieldFeedbackWS>\n  //     <FieldFeedbackWS className=\"FieldFeedbackWS-root-125\" ...></FieldFeedback>\n  //   </FieldFeedbackWS>\n  // </WithStyles(FieldFeedbackWS)>\n  class FieldFeedbackWS extends React.PureComponent<FieldFeedbackPropsWithStyles> {\n    render() {\n      const { classes, className, ...otherProps } = this.props;\n\n      const classNames = className !== undefined ? `${className} ${classes.root}` : classes.root;\n\n      return <_FieldFeedback className={classNames} {...otherProps} />;\n    }\n  }\n);\n\nexport { FieldFeedbacks, Async };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}