{"ast":null,"code":"var _jsxFileName = \"D:\\\\11\\\\react_project\\\\src\\\\components\\\\UserForm.js\";\nimport React, { Component } from 'react';\nimport Container from \"@material-ui/core/Container\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Input from \"@material-ui/core/Input\";\nimport { validEmpty, validNameMaxLength, validName, validDate, validEmail } from \"./validator\";\nimport { Button, Form, Label } from \"reactstrap\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserForm extends Component {\n  /* validationState = {\r\n       firstName: {\r\n           errors: [],\r\n           validators: [validEmpty, validName, validNameMaxLength]\r\n       },\r\n       lastName: {\r\n           errors: [],\r\n           validators: [validEmpty, validName, validNameMaxLength],\r\n       },\r\n       email: {\r\n           errors: [],\r\n           validators: [validEmpty, validEmail],\r\n       },\r\n       birthDate: {\r\n           errors: [],\r\n           validators: [validEmpty,validDate],\r\n       },\r\n       allField: {\r\n           errors: []\r\n       }\r\n   }\r\n     emptyItem = {\r\n       firstName: '',\r\n       lastName: '',\r\n       email: '',\r\n       birthDate: ''\r\n   };\r\n     constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n           item: this.emptyItem,\r\n           validation: this.validationState,\r\n           isValidForm: false\r\n       };\r\n       this.handleChange = this.handleChange.bind(this);\r\n       this.handleSubmit = this.handleSubmit.bind(this);\r\n   }\r\n     errorRender(validationFieldState) {\r\n       if (validationFieldState.errors.length) {\r\n           return validationFieldState.errors.map((error) => (<div className=\"error-field\">- {error}</div>));\r\n       }\r\n       return <></>;\r\n   }\r\n     /!*async componentDidMount() {\r\n       if (this.props.match.params.id !== 'new') {\r\n           /!*const user = await (await fetch(`/api/users?id=${this.props.match.params.id}`)).json();*!/\r\n           this.initValidation(user);\r\n       }\r\n   }*!/\r\n     initValidation(user) {\r\n       const validation = {...this.state.validation};\r\n       for (let key in user) {\r\n           if (key !== 'id') {\r\n               validation[key] = this.validation(key, user[key].toString());\r\n           }\r\n       }\r\n         const isValidForm = this.getValidationStatus(validation);\r\n       this.setState({item: user, isValidForm, validation});\r\n   }\r\n     validation(fieldName, fieldValue){\r\n       const self = this;\r\n       const fieldValidation = {...self.state.validation[fieldName], errors: []};\r\n       fieldValidation.validators.forEach(validator => {\r\n           const errors = fieldValidation.errors;\r\n           fieldValidation.errors = [...errors, ...validator(fieldValue)];\r\n       });\r\n         return fieldValidation;\r\n   }\r\n   handleChange(event) {\r\n       const target = event.target;\r\n       const value = target.value;\r\n       const name = target.name;\r\n       let item = {...this.state.item};\r\n       item[name] = value;\r\n       const validation = {\r\n           ...this.state.validation,\r\n           [name]: this.validation(name, value.toString())\r\n       };\r\n       validation.allField.errors = [];\r\n       const isValidForm = this.getValidationStatus(validation);\r\n       this.setState({...this.state, validation, item, isValidForm});\r\n   }\r\n     getValidationStatus(validation) {\r\n       return Object.values(validation)\r\n           .every(validField => !validField.errors.length);\r\n   }\r\n     async handleSubmit(event) {\r\n       const self = this;\r\n       event.preventDefault();\r\n       const {item} = this.state;\r\n       const userData = {\r\n           firstName: item.firstName,\r\n           lastName: item.lastName,\r\n           email: item.email,\r\n           birthDate: item.birthDate\r\n       }\r\n         const endpoint = +item.id ? `/api/users?id=${item.id}` : '/api/users';\r\n         await fetch(endpoint, {\r\n           method: (item.id) ? 'PUT' : 'POST',\r\n           headers: {\r\n               'Accept': 'application/json',\r\n               'Content-Type': 'application/json'\r\n           },\r\n           body: JSON.stringify(userData),\r\n       }).then(response => {\r\n           if (![400, 500].includes(+response.status)) {\r\n               window.location.href = 'http://34.88.120.86:3000/users';\r\n               return null;\r\n           }\r\n           return response.text();\r\n       }).then(message => {\r\n           const validation = {...self.state.validation, allField: {errors: [message]}};\r\n           self.setState({...self.state, validation});\r\n       });\r\n   }\r\n     render() {\r\n       const {item, validation, isValidForm} = this.state;\r\n       const title = <h2>{item.id ? 'Edit User' : 'Add User'}</h2>;\r\n         return <div>\r\n           <Container>\r\n               {title}\r\n               <Form onSubmit={this.handleSubmit}>\r\n                   <FormGroup>\r\n                       <Label for=\"firstname\">First Name</Label>\r\n                       <Input type=\"text\" name=\"firstName\" id=\"firstName\" value={item.firstName || ''}\r\n                              onChange={this.handleChange} autoComplete=\"firstName\"/>\r\n                       {this.errorRender(validation.firstName)}\r\n                   </FormGroup>\r\n                   <FormGroup>\r\n                       <Label for=\"lastName\">Last Name</Label>\r\n                       <Input type=\"text\" name=\"lastName\" id=\"lastName\" value={item.lastName || ''}\r\n                              onChange={this.handleChange} autoComplete=\"lastName\"/>\r\n                       {this.errorRender(validation.lastName)}\r\n                   </FormGroup>\r\n                   <FormGroup>\r\n                       <Label for=\"email\">Email</Label>\r\n                       <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\r\n                              onChange={this.handleChange} autoComplete=\"email\"/>\r\n                       {this.errorRender(validation.email)}\r\n                   </FormGroup>\r\n                   <FormGroup>\r\n                       <Label for=\"birthDate\">Birth Date</Label>\r\n                       <Input type=\"text\" name=\"birthDate\" id=\"birthDate\" value={item.birthDate || ''}\r\n                              onChange={this.handleChange} autoComplete=\"birthDate\"/>\r\n                       {this.errorRender(validation.birthDate)}\r\n                   </FormGroup>\r\n                   <FormGroup>\r\n                       {this.errorRender(validation.allField)}\r\n                       <Button color=\"primary\" type=\"submit\" disabled={!isValidForm}>Save</Button>{' '}\r\n                       <Button color=\"secondary\"  to=\"/users\">Cancel</Button>\r\n                   </FormGroup>\r\n               </Form>\r\n           </Container>\r\n       </div>\r\n   }*/\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    alert(value);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"name\",\n        value: \"\",\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserForm;","map":{"version":3,"sources":["D:/11/react_project/src/components/UserForm.js"],"names":["React","Component","Container","FormGroup","Input","validEmpty","validNameMaxLength","validName","validDate","validEmail","Button","Form","Label","TextField","UserForm","handleChange","event","target","value","alert","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,SAAQC,UAAR,EAAoBC,kBAApB,EAAwCC,SAAxC,EAAmDC,SAAnD,EAA8DC,UAA9D,QAA+E,aAA/E;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAkC,YAAlC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;;AAEA,MAAMC,QAAN,SAAuBb,SAAvB,CAAieIc,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,IAAI,EAAE,MAAjB;AAAyB,QAAA,KAAK,EAAE,EAAhC;AAAoC,QAAA,QAAQ,EAAE,KAAKL;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAvL4B;;AA2LjC,eAAeD,QAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport {validEmpty, validNameMaxLength, validName, validDate, validEmail} from \"./validator\";\r\nimport {Button, Form, Label} from \"reactstrap\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass UserForm extends Component {\r\n   /* validationState = {\r\n        firstName: {\r\n            errors: [],\r\n            validators: [validEmpty, validName, validNameMaxLength]\r\n        },\r\n        lastName: {\r\n            errors: [],\r\n            validators: [validEmpty, validName, validNameMaxLength],\r\n        },\r\n        email: {\r\n            errors: [],\r\n            validators: [validEmpty, validEmail],\r\n        },\r\n        birthDate: {\r\n            errors: [],\r\n            validators: [validEmpty,validDate],\r\n        },\r\n        allField: {\r\n            errors: []\r\n        }\r\n    }\r\n\r\n    emptyItem = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        birthDate: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyItem,\r\n            validation: this.validationState,\r\n            isValidForm: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    errorRender(validationFieldState) {\r\n        if (validationFieldState.errors.length) {\r\n            return validationFieldState.errors.map((error) => (<div className=\"error-field\">- {error}</div>));\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    /!*async componentDidMount() {\r\n        if (this.props.match.params.id !== 'new') {\r\n            /!*const user = await (await fetch(`/api/users?id=${this.props.match.params.id}`)).json();*!/\r\n            this.initValidation(user);\r\n        }\r\n    }*!/\r\n\r\n    initValidation(user) {\r\n        const validation = {...this.state.validation};\r\n        for (let key in user) {\r\n            if (key !== 'id') {\r\n                validation[key] = this.validation(key, user[key].toString());\r\n            }\r\n        }\r\n\r\n        const isValidForm = this.getValidationStatus(validation);\r\n        this.setState({item: user, isValidForm, validation});\r\n    }\r\n\r\n    validation(fieldName, fieldValue){\r\n        const self = this;\r\n        const fieldValidation = {...self.state.validation[fieldName], errors: []};\r\n        fieldValidation.validators.forEach(validator => {\r\n            const errors = fieldValidation.errors;\r\n            fieldValidation.errors = [...errors, ...validator(fieldValue)];\r\n        });\r\n\r\n        return fieldValidation;\r\n    }\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        const validation = {\r\n            ...this.state.validation,\r\n            [name]: this.validation(name, value.toString())\r\n        };\r\n        validation.allField.errors = [];\r\n        const isValidForm = this.getValidationStatus(validation);\r\n        this.setState({...this.state, validation, item, isValidForm});\r\n    }\r\n\r\n    getValidationStatus(validation) {\r\n        return Object.values(validation)\r\n            .every(validField => !validField.errors.length);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        const self = this;\r\n        event.preventDefault();\r\n        const {item} = this.state;\r\n        const userData = {\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n            email: item.email,\r\n            birthDate: item.birthDate\r\n        }\r\n\r\n        const endpoint = +item.id ? `/api/users?id=${item.id}` : '/api/users';\r\n\r\n        await fetch(endpoint, {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(userData),\r\n        }).then(response => {\r\n            if (![400, 500].includes(+response.status)) {\r\n                window.location.href = 'http://34.88.120.86:3000/users';\r\n                return null;\r\n            }\r\n            return response.text();\r\n        }).then(message => {\r\n            const validation = {...self.state.validation, allField: {errors: [message]}};\r\n            self.setState({...self.state, validation});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {item, validation, isValidForm} = this.state;\r\n        const title = <h2>{item.id ? 'Edit User' : 'Add User'}</h2>;\r\n\r\n        return <div>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"firstname\">First Name</Label>\r\n                        <Input type=\"text\" name=\"firstName\" id=\"firstName\" value={item.firstName || ''}\r\n                               onChange={this.handleChange} autoComplete=\"firstName\"/>\r\n                        {this.errorRender(validation.firstName)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"lastName\">Last Name</Label>\r\n                        <Input type=\"text\" name=\"lastName\" id=\"lastName\" value={item.lastName || ''}\r\n                               onChange={this.handleChange} autoComplete=\"lastName\"/>\r\n                        {this.errorRender(validation.lastName)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email</Label>\r\n                        <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\r\n                               onChange={this.handleChange} autoComplete=\"email\"/>\r\n                        {this.errorRender(validation.email)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"birthDate\">Birth Date</Label>\r\n                        <Input type=\"text\" name=\"birthDate\" id=\"birthDate\" value={item.birthDate || ''}\r\n                               onChange={this.handleChange} autoComplete=\"birthDate\"/>\r\n                        {this.errorRender(validation.birthDate)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        {this.errorRender(validation.allField)}\r\n                        <Button color=\"primary\" type=\"submit\" disabled={!isValidForm}>Save</Button>{' '}\r\n                        <Button color=\"secondary\"  to=\"/users\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    }*/\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        alert(value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TextField name={\"name\"} value={\"\"} onChange={this.handleChange}></TextField>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default UserForm;"]},"metadata":{},"sourceType":"module"}