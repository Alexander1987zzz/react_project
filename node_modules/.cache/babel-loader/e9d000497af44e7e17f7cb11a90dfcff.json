{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { FieldFeedbacks } from './FieldFeedbacks';\nimport { FormWithConstraints } from './FormWithConstraints';\nexport class FieldFeedbackWhenValid extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      fieldIsValid: undefined\n    };\n\n    this.fieldWillValidate = fieldName => {\n      if (fieldName === this.context.fieldFeedbacks.fieldName) {\n        this.setState({\n          fieldIsValid: undefined\n        });\n      }\n    };\n\n    this.fieldDidValidate = field => {\n      if (field.name === this.context.fieldFeedbacks.fieldName) {\n        this.setState({\n          fieldIsValid: field.isValid()\n        });\n      }\n    };\n\n    this.fieldDidReset = field => {\n      if (field.name === this.context.fieldFeedbacks.fieldName) {\n        this.setState({\n          fieldIsValid: undefined\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  render() {\n    const {\n      style,\n      ...otherProps\n    } = this.props;\n    return this.state.fieldIsValid ? React.createElement(\"span\", Object.assign({}, otherProps, {\n      style: {\n        display: 'block',\n        ...style\n      }\n    })) : null;\n  }\n\n}\nFieldFeedbackWhenValid.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired,\n  fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired\n};","map":{"version":3,"sources":["../src/FieldFeedbackWhenValid.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAIA,SAAS,cAAT,QAA2D,kBAA3D;AACA,SAAS,mBAAT,QAAqE,uBAArE;AAgBA,OAAM,MAAO,sBAAP,SAEI,KAAK,CAAC,SAFV,CAEuD;AAF7D,EAAA,WAAA,GAAA;;AASE,SAAA,KAAA,GAAqC;AACnC,MAAA,YAAY,EAAE;AADqB,KAArC;;AAkBA,SAAA,iBAAA,GAAqB,SAAD,IAAsB;AAExC,UAAI,SAAS,KAAK,KAAK,OAAL,CAAa,cAAb,CAA4B,SAA9C,EAAyD;AACvD,aAAK,QAAL,CAAc;AAAE,UAAA,YAAY,EAAE;AAAhB,SAAd;AACD;AACF,KALD;;AAOA,SAAA,gBAAA,GAAoB,KAAD,IAAiB;AAElC,UAAI,KAAK,CAAC,IAAN,KAAe,KAAK,OAAL,CAAa,cAAb,CAA4B,SAA/C,EAA0D;AACxD,aAAK,QAAL,CAAc;AAAE,UAAA,YAAY,EAAE,KAAK,CAAC,OAAN;AAAhB,SAAd;AACD;AACF,KALD;;AAOA,SAAA,aAAA,GAAiB,KAAD,IAAiB;AAE/B,UAAI,KAAK,CAAC,IAAN,KAAe,KAAK,OAAL,CAAa,cAAb,CAA4B,SAA/C,EAA0D;AACxD,aAAK,QAAL,CAAc;AAAE,UAAA,YAAY,EAAE;AAAhB,SAAd;AACD;AACF,KALD;AAmBD;;AA7CC,EAAA,iBAAiB,GAAA;AACf,SAAK,OAAL,CAAa,IAAb,CAAkB,iCAAlB,CAAoD,KAAK,iBAAzD;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB,gCAAlB,CAAmD,KAAK,gBAAxD;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB,6BAAlB,CAAgD,KAAK,aAArD;AACD;;AAED,EAAA,oBAAoB,GAAA;AAClB,SAAK,OAAL,CAAa,IAAb,CAAkB,oCAAlB,CAAuD,KAAK,iBAA5D;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB,mCAAlB,CAAsD,KAAK,gBAA3D;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB,gCAAlB,CAAmD,KAAK,aAAxD;AACD;;AAwBD,EAAA,MAAM,GAAA;AACJ,UAAM;AAAE,MAAA,KAAF;AAAS,SAAG;AAAZ,QAA4B,KAAK,KAAvC;AAEA,WAAO,KAAK,KAAL,CAAW,YAAX,GAGL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAU,UAAV,EAAoB;AAAE,MAAA,KAAK,EAAE;AAAE,QAAA,OAAO,EAAE,OAAX;AAAoB,WAAG;AAAvB;AAAT,KAApB,CAAA,CAHK,GAIH,IAJJ;AAKD;;AAvD0D;AACpD,sBAAA,CAAA,YAAA,GAAmE;AACxE,EAAA,IAAI,EAAE,SAAS,CAAC,UAAV,CAAqB,mBAArB,EAA0C,UADwB;AAExE,EAAA,cAAc,EAAE,SAAS,CAAC,UAAV,CAAqB,cAArB,EAAqC;AAFmB,CAAnE","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { Field } from './Field';\nimport { FieldFeedbackClasses } from './FieldFeedback';\nimport { FieldFeedbacks, FieldFeedbacksChildContext } from './FieldFeedbacks';\nimport { FormWithConstraints, FormWithConstraintsChildContext } from './FormWithConstraints';\n\nexport interface FieldFeedbackWhenValidBaseProps {}\n\nexport interface FieldFeedbackWhenValidProps\n  extends FieldFeedbackWhenValidBaseProps,\n    FieldFeedbackClasses,\n    React.HTMLAttributes<HTMLSpanElement> {}\n\ninterface FieldFeedbackWhenValidState {\n  fieldIsValid: boolean | undefined;\n}\n\nexport type FieldFeedbackWhenValidContext = FormWithConstraintsChildContext &\n  FieldFeedbacksChildContext;\n\nexport class FieldFeedbackWhenValid<\n  Props extends FieldFeedbackWhenValidBaseProps = FieldFeedbackWhenValidProps\n> extends React.Component<Props, FieldFeedbackWhenValidState> {\n  static contextTypes: React.ValidationMap<FieldFeedbackWhenValidContext> = {\n    form: PropTypes.instanceOf(FormWithConstraints).isRequired,\n    fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired\n  };\n  context!: FieldFeedbackWhenValidContext;\n\n  state: FieldFeedbackWhenValidState = {\n    fieldIsValid: undefined\n  };\n\n  /* eslint-disable react/destructuring-assignment */\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  fieldWillValidate = (fieldName: string) => {\n    // Ignore the event if it's not for us\n    if (fieldName === this.context.fieldFeedbacks.fieldName) {\n      this.setState({ fieldIsValid: undefined });\n    }\n  };\n\n  fieldDidValidate = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.context.fieldFeedbacks.fieldName) {\n      this.setState({ fieldIsValid: field.isValid() });\n    }\n  };\n\n  fieldDidReset = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.context.fieldFeedbacks.fieldName) {\n      this.setState({ fieldIsValid: undefined });\n    }\n  };\n\n  // Don't forget to update native/FieldFeedbackWhenValid.render()\n  render() {\n    const { style, ...otherProps } = (this.props as unknown) as FieldFeedbackWhenValidProps;\n\n    return this.state.fieldIsValid ? (\n      // <span style=\"display: block\"> instead of <div> so FieldFeedbackWhenValid can be wrapped inside a <p>\n      // otherProps before className because otherProps contains data-feedback\n      <span {...otherProps} style={{ display: 'block', ...style }} />\n    ) : null;\n  }\n\n  /* eslint-enable react/destructuring-assignment */\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}