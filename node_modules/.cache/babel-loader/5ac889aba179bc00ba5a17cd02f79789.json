{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Async as _Async, FieldEvent, FieldFeedback as _FieldFeedback, FieldFeedbacks as _FieldFeedbacks, FieldFeedbackType, FormWithConstraints, isHTMLInput } from 'react-form-with-constraints';\n\nfunction beautifulStringify(obj, space) {\n  let str = JSON.stringify(obj, (_key, value) => value === undefined ? '__undefined__' : value, space);\n  str = str.replace(/\"__undefined__\"/g, 'undefined');\n  str = str.replace(/\"([^\"]+)\":/g, '$1:');\n  str = str.replace(/: \"(.*[\\\\\"].*)\",/g, ': $1,');\n  str = str.replace(/\\\\\"/g, '\"');\n  return str;\n}\n\nfunction normalizeFieldElementProperty(fields) {\n  return fields.map(field => {\n    const {\n      element,\n      ...otherProps\n    } = field;\n    return element ? {\n      element: isHTMLInput(element) ? element.outerHTML : element.props,\n      ...otherProps\n    } : field;\n  });\n}\n\nexport class DisplayFields extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.reRender = () => {\n      this.forceUpdate();\n    };\n  }\n\n  componentDidMount() {\n    this.context.form.fieldsStore.addListener(FieldEvent.Added, this.reRender);\n    this.context.form.fieldsStore.addListener(FieldEvent.Removed, this.reRender);\n    this.context.form.addFieldDidValidateEventListener(this.reRender);\n    this.context.form.addFieldDidResetEventListener(this.reRender);\n  }\n\n  componentWillUnmount() {\n    this.context.form.fieldsStore.removeListener(FieldEvent.Added, this.reRender);\n    this.context.form.fieldsStore.removeListener(FieldEvent.Removed, this.reRender);\n    this.context.form.removeFieldDidValidateEventListener(this.reRender);\n    this.context.form.removeFieldDidResetEventListener(this.reRender);\n  }\n\n  render() {\n    let str = beautifulStringify(normalizeFieldElementProperty(this.context.form.fieldsStore.fields), 2);\n    str = str.replace(/{\\s+key: (.*),\\s+type: (.*),\\s+show: (.*)\\s+}/g, '{ key: $1, type: $2, show: $3 }');\n    return str;\n  }\n\n}\nDisplayFields.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired\n};\nexport { FormWithConstraints };\nexport class FieldFeedbacks extends _FieldFeedbacks {\n  render() {\n    const {\n      for: fieldName,\n      stop\n    } = this.props;\n    let attr = '';\n    if (fieldName) attr += `for=\"${fieldName}\" `;\n    attr += `stop=\"${stop}\"`;\n    return React.createElement(React.Fragment, null, React.createElement(\"li\", null, \"key=\\\"\", this.key, \"\\\" \", attr), React.createElement(\"ul\", null, super.render()));\n  }\n\n}\nexport class FieldFeedback extends _FieldFeedback {\n  constructor() {\n    super(...arguments);\n    this.rootEl = null;\n  }\n\n  getTextDecoration() {\n    const {\n      show\n    } = this.state.validation;\n    let textDecoration = '';\n\n    switch (show) {\n      case false:\n        textDecoration = 'line-through';\n        break;\n\n      case undefined:\n        textDecoration = 'line-through dotted';\n        break;\n\n      default:\n        textDecoration = '';\n    }\n\n    return textDecoration;\n  }\n\n  render() {\n    const {\n      key,\n      type\n    } = this.state.validation;\n    return React.createElement(\"li\", {\n      ref: rootEl => this.rootEl = rootEl\n    }, React.createElement(\"span\", {\n      style: {\n        textDecoration: this.getTextDecoration()\n      }\n    }, \"key=\\\"\", key, \"\\\" type=\\\"\", type, \"\\\"\"), ' ', super.render());\n  }\n\n  componentDidUpdate() {\n    const fieldFeedbackSpans = this.rootEl.querySelectorAll('[data-feedback]');\n    fieldFeedbackSpans.forEach(fieldFeedbackSpan => {\n      fieldFeedbackSpan.style.display = 'inline';\n    });\n    const li = this.rootEl.closest('li.async');\n\n    if (li !== null) {\n      const async = li.querySelector('span[style]');\n      async.style.textDecoration = this.getTextDecoration();\n    }\n\n    const {\n      type\n    } = this.state.validation;\n\n    if (type === FieldFeedbackType.WhenValid) {\n      const span = this.rootEl.querySelector('span[style]');\n      const whenValid = this.rootEl.querySelector(`span.${this.props.classes.valid}`);\n      span.style.textDecoration = whenValid !== null ? '' : 'line-through';\n    }\n  }\n\n}\nexport class Async extends _Async {\n  constructor() {\n    super(...arguments);\n    this.rootEl = null;\n  }\n\n  static getTextDecoration() {\n    return 'line-through dotted';\n  }\n\n  componentDidUpdate() {\n    const async = this.rootEl.querySelector('span[style]');\n    async.style.textDecoration = Async.getTextDecoration();\n  }\n\n  render() {\n    return React.createElement(\"li\", {\n      className: \"async\",\n      ref: rootEl => this.rootEl = rootEl\n    }, React.createElement(\"span\", {\n      style: {\n        textDecoration: Async.getTextDecoration()\n      }\n    }, \"Async\"), React.createElement(\"ul\", null, super.render()));\n  }\n\n}","map":{"version":3,"sources":["../src/DisplayFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Async as _Async,\n  Field,\n  FieldEvent,\n  FieldFeedback as _FieldFeedback,\n  FieldFeedbacks as _FieldFeedbacks,\n  FieldFeedbackType,\n  FormWithConstraints,\n  FormWithConstraintsChildContext,\n  isHTMLInput\n} from 'react-form-with-constraints';\n\n// Before:\n// [\n//   {\n//     \"element\": \"<input id=\\\"username\\\" name=\\\"username\\\" required=\\\"\\\" minlength=\\\"3\\\" class=\\\"form-control is-pending-sm is-invalid\\\" value=\\\"\\\">\",\n//     \"name\": \"username\",\n//     \"validations\": [\n//       { \"key\": \"0.0\", \"type\": \"error\", \"show\": false },\n//       { \"key\": \"0.1\", \"type\": \"error\", \"show\": true },\n//       { \"key\": \"0.2\", \"type\": \"whenValid\" }\n//     ]\n//   }\n// ]\n//\n// After:\n// [\n//   {\n//     element: <input id=\"username\" name=\"username\" required=\"\" minlength=\"3\" class=\"form-control is-pending-sm is-invalid\" value=\"\">,\n//     name: \"username\",\n//     validations: [\n//       { key: \"0.0\", type: \"error\", show: false },\n//       { key: \"0.1\", type: \"error\", show: true },\n//       { key: \"0.2\", type: \"whenValid\", show: undefined }\n//     ]\n//   }\n// ]\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction beautifulStringify(obj: {}, space?: string | number) {\n  // Keep undefined\n  // [Preserving undefined that JSON.stringify otherwise removes](https://stackoverflow.com/q/26540706)\n  let str = JSON.stringify(\n    obj,\n    (_key, value) => (value === undefined ? '__undefined__' : value),\n    space\n  );\n  str = str.replace(/\"__undefined__\"/g, 'undefined');\n\n  // Remove quotes from properties\n  // Before: \"name\":\n  // After: name:\n  // [JSON.stringify without quotes on properties?](https://stackoverflow.com/q/11233498)\n  str = str.replace(/\"([^\"]+)\":/g, '$1:');\n\n  // Before: element: \"<input id=\\\"username\\\" name=\\\"username\\\" required=\\\"\\\">\",\n  // After: element: <input id=\\\"username\\\" name=\\\"username\\\" required=\\\"\\\">,\n  // eslint-disable-next-line unicorn/better-regex\n  str = str.replace(/: \"(.*[\\\\\"].*)\",/g, ': $1,');\n\n  // Before: <input id=\\\"username\\\" name=\\\"username\\\" required=\\\"\\\">\n  // After: <input id=\"username\" name=\"username\" required=\"\">\n  str = str.replace(/\\\\\"/g, '\"');\n\n  return str;\n}\n\n// Cannot display field.element directly, will throw \"Converting circular structure to JSON\" when calling JSON.stringify()\nfunction normalizeFieldElementProperty(fields: Field[]) {\n  return fields.map(field => {\n    const { element, ...otherProps } = field;\n    return element\n      ? {\n          element: isHTMLInput(element) ? element.outerHTML : element.props,\n          ...otherProps\n        }\n      : field;\n  });\n}\n\nexport class DisplayFields extends React.Component {\n  static contextTypes: React.ValidationMap<FormWithConstraintsChildContext> = {\n    form: PropTypes.instanceOf(FormWithConstraints).isRequired\n  };\n  context!: FormWithConstraintsChildContext;\n\n  /* eslint-disable react/destructuring-assignment */\n\n  componentDidMount() {\n    this.context.form.fieldsStore.addListener(FieldEvent.Added, this.reRender);\n    this.context.form.fieldsStore.addListener(FieldEvent.Removed, this.reRender);\n    this.context.form.addFieldDidValidateEventListener(this.reRender);\n    this.context.form.addFieldDidResetEventListener(this.reRender);\n  }\n\n  componentWillUnmount() {\n    this.context.form.fieldsStore.removeListener(FieldEvent.Added, this.reRender);\n    this.context.form.fieldsStore.removeListener(FieldEvent.Removed, this.reRender);\n    this.context.form.removeFieldDidValidateEventListener(this.reRender);\n    this.context.form.removeFieldDidResetEventListener(this.reRender);\n  }\n\n  reRender = () => {\n    this.forceUpdate();\n  };\n\n  render() {\n    let str = beautifulStringify(\n      normalizeFieldElementProperty(this.context.form.fieldsStore.fields),\n      2\n    );\n\n    // Cosmetic: improve formatting\n    //\n    // Replace this string:\n    // {\n    //   key: \"1.0\",\n    //   type: \"error\",\n    //   show: true\n    // }\n    // with this:\n    // { key: \"1.0\", type: \"error\", show: true }\n    str = str.replace(\n      /{\\s+key: (.*),\\s+type: (.*),\\s+show: (.*)\\s+}/g,\n      '{ key: $1, type: $2, show: $3 }'\n    );\n\n    return str;\n  }\n\n  /* eslint-enable react/destructuring-assignment */\n}\n\nexport { FormWithConstraints };\n\nexport class FieldFeedbacks extends _FieldFeedbacks {\n  render() {\n    const { for: fieldName, stop } = this.props;\n\n    let attr = '';\n    if (fieldName) attr += `for=\"${fieldName}\" `;\n    attr += `stop=\"${stop}\"`;\n\n    return (\n      <>\n        <li>\n          key=\"{this.key}\" {attr}\n        </li>\n        <ul>{super.render()}</ul>\n      </>\n    );\n  }\n}\n\nexport class FieldFeedback extends _FieldFeedback {\n  private rootEl: HTMLLIElement | null = null;\n\n  private getTextDecoration() {\n    const { show } = this.state.validation;\n\n    let textDecoration = '';\n    switch (show) {\n      case false:\n        textDecoration = 'line-through';\n        break;\n      case undefined:\n        textDecoration = 'line-through dotted';\n        break;\n      default:\n        textDecoration = '';\n    }\n\n    return textDecoration;\n  }\n\n  render() {\n    const { key, type } = this.state.validation;\n\n    return (\n      <li ref={rootEl => (this.rootEl = rootEl)}>\n        <span style={{ textDecoration: this.getTextDecoration() }}>\n          key=\"{key}\" type=\"{type}\"\n        </span>{' '}\n        {super.render()}\n      </li>\n    );\n  }\n\n  componentDidUpdate() {\n    // Hack: make FieldFeedback <span style=\"display: inline\">\n    // Also make Bootstrap 4 happy because it sets 'display: none', https://github.com/twbs/bootstrap/blob/v4.1.2/scss/mixins/_forms.scss#L31\n    const fieldFeedbackSpans = this.rootEl!.querySelectorAll<HTMLSpanElement>('[data-feedback]');\n    fieldFeedbackSpans.forEach(fieldFeedbackSpan => {\n      // eslint-disable-next-line no-param-reassign\n      fieldFeedbackSpan.style.display = 'inline';\n    });\n\n    // Change Async parent style\n    const li = this.rootEl!.closest('li.async');\n    if (li !== null) {\n      const async = li.querySelector<HTMLSpanElement>('span[style]');\n      async!.style.textDecoration = this.getTextDecoration();\n    }\n\n    // Change whenValid style\n    const { type } = this.state.validation;\n    if (type === FieldFeedbackType.WhenValid) {\n      const span = this.rootEl!.querySelector<HTMLSpanElement>('span[style]');\n      const whenValid = this.rootEl!.querySelector<HTMLSpanElement>(\n        `span.${this.props.classes!.valid}`\n      );\n      span!.style.textDecoration = whenValid !== null ? '' : 'line-through';\n    }\n  }\n}\n\nexport class Async<T> extends _Async<T> {\n  private rootEl: HTMLLIElement | null = null;\n\n  private static getTextDecoration() {\n    return 'line-through dotted';\n  }\n\n  componentDidUpdate() {\n    // Reset style\n    const async = this.rootEl!.querySelector<HTMLSpanElement>('span[style]');\n    async!.style.textDecoration = Async.getTextDecoration();\n  }\n\n  render() {\n    return (\n      <li className=\"async\" ref={rootEl => (this.rootEl = rootEl)}>\n        <span style={{ textDecoration: Async.getTextDecoration() }}>Async</span>\n        <ul>{super.render()}</ul>\n      </li>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}