{"ast":null,"code":"var _jsxFileName = \"D:\\\\11\\\\react_project\\\\src\\\\components\\\\UserForm.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeEmail = event => {\n      const email = event.target.value;\n      this.setState({\n        email\n      });\n    };\n\n    this.handleChangeAge = event => {\n      const age = event.target.value;\n      this.setState({\n        age\n      });\n    };\n\n    this.handleChangeName = event => {\n      const name = event.target.value;\n      this.setState({\n        name\n      });\n    };\n\n    this.handleChangeSurname = event => {\n      const surname = event.target.value;\n      this.setState({\n        surname\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.props.addUser(this.state);\n      this.clearForm();\n    };\n\n    this.state = {\n      user: this.props.userAttr\n    };\n  }\n  /* componentDidUpdate(newVal, oldVal) {\r\n       if (this.props.userAttr !== oldVal.userAttr) {\r\n           this.setState({\r\n               user: this.props.userAttr\r\n           });\r\n       }\r\n   }\r\n  */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.userAttr !== prevProps.userAttr) {\n      this.setState({\n        name: this.props.userAttr.name,\n        surname: this.props.userAttr.surname\n      });\n    }\n  }\n\n  clearForm() {\n    this.setState({\n      name: '',\n      surname: '',\n      age: '',\n      email: ''\n    });\n    this.x = false;\n  }\n\n  render() {\n    /*let name = this.state.name;\r\n    let surname = this.state.surname;\r\n    let age = this.state.age;\r\n    let email = this.state.email;\r\n      if (this.props.userAttr !== null ) {\r\n        name = this.props.userAttr.name;\r\n        surname = this.props.userAttr.surname;\r\n        age = this.props.userAttr.age;\r\n        email = this.props.userAttr.email;\r\n      }*/\n    return /*#__PURE__*/_jsxDEV(ValidatorForm, {\n      ref: \"form\",\n      onSubmit: this.handleSubmit,\n      onError: errors => console.log(errors),\n      children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n        label: \"Name\",\n        onChange: this.handleChangeName,\n        name: \"name\",\n        value: this.state.user.name,\n        validators: ['required', 'matchRegexp:^([A-Z][a-z]{2,15})$'],\n        errorMessages: ['this field is required', 'name is not valid']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n        label: \"Surname\",\n        onChange: this.handleChangeSurname,\n        name: \"surname\",\n        value: this.state.user.surname,\n        validators: ['required', 'matchRegexp:^([A-Z][a-z]{2,15})$'],\n        errorMessages: ['this field is required', 'surname is not valid']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n        label: \"Age\",\n        onChange: this.handleChangeAge,\n        name: \"age\",\n        value: this.state.user.age,\n        validators: ['required', 'minNumber:1', 'maxNumber:116', 'matchRegexp:^[1-9][0-9]?$'],\n        errorMessages: ['this field is required', 'email is not valid', 'some thing']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n        label: \"Email\",\n        onChange: this.handleChangeEmail,\n        name: \"email\",\n        value: this.state.user.email,\n        validators: ['required', 'isEmail'],\n        errorMessages: ['this field is required', 'email is not valid']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserForm;","map":{"version":3,"sources":["D:/11/react_project/src/components/UserForm.js"],"names":["React","Button","ValidatorForm","TextValidator","UserForm","Component","constructor","props","handleChangeEmail","event","email","target","value","setState","handleChangeAge","age","handleChangeName","name","handleChangeSurname","surname","handleSubmit","addUser","state","clearForm","user","userAttr","componentDidUpdate","prevProps","prevState","x","render","errors","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\n\r\nclass UserForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: this.props.userAttr,\r\n        };\r\n    }\r\n\r\n   /* componentDidUpdate(newVal, oldVal) {\r\n        if (this.props.userAttr !== oldVal.userAttr) {\r\n            this.setState({\r\n                user: this.props.userAttr\r\n            });\r\n        }\r\n    }\r\n*/\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.userAttr !== prevProps.userAttr) {\r\n            this.setState({\r\n                name: this.props.userAttr.name,\r\n                surname: this.props.userAttr.surname\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    handleChangeEmail = (event) => {\r\n        const email = event.target.value;\r\n        this.setState({email});\r\n    }\r\n    handleChangeAge = (event) => {\r\n        const age = event.target.value;\r\n        this.setState({age});\r\n    }\r\n    handleChangeName = (event) => {\r\n        const name = event.target.value;\r\n        this.setState({name});\r\n    }\r\n    handleChangeSurname = (event) => {\r\n        const surname = event.target.value;\r\n        this.setState({surname});\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.props.addUser(this.state)\r\n        this.clearForm()\r\n    }\r\n\r\n    clearForm() {\r\n        this.setState({\r\n            name: '',\r\n            surname: '',\r\n            age: '',\r\n            email: ''\r\n        });\r\n        this.x = false\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        /*let name = this.state.name;\r\n        let surname = this.state.surname;\r\n        let age = this.state.age;\r\n        let email = this.state.email;\r\n\r\n        if (this.props.userAttr !== null ) {\r\n            name = this.props.userAttr.name;\r\n            surname = this.props.userAttr.surname;\r\n            age = this.props.userAttr.age;\r\n            email = this.props.userAttr.email;\r\n\r\n        }*/\r\n\r\n        return (\r\n            <ValidatorForm\r\n                ref=\"form\"\r\n                onSubmit={this.handleSubmit}\r\n                onError={errors => console.log(errors)}\r\n            >\r\n                <TextValidator\r\n                    label=\"Name\"\r\n                    onChange={this.handleChangeName}\r\n                    name=\"name\"\r\n                    value={this.state.user.name}\r\n                    validators={['required', 'matchRegexp:^([A-Z][a-z]{2,15})$']}\r\n                    errorMessages={['this field is required', 'name is not valid']}\r\n                />\r\n                <TextValidator\r\n                    label=\"Surname\"\r\n                    onChange={this.handleChangeSurname}\r\n                    name=\"surname\"\r\n                    value={this.state.user.surname}\r\n                    validators={['required', 'matchRegexp:^([A-Z][a-z]{2,15})$']}\r\n                    errorMessages={['this field is required', 'surname is not valid']}\r\n                />\r\n                <TextValidator\r\n                    label=\"Age\"\r\n                    onChange={this.handleChangeAge}\r\n                    name=\"age\"\r\n                    value={this.state.user.age}\r\n                    validators={['required', 'minNumber:1', 'maxNumber:116', 'matchRegexp:^[1-9][0-9]?$']}\r\n                    errorMessages={['this field is required', 'email is not valid', 'some thing']}\r\n                />\r\n                <TextValidator\r\n                    label=\"Email\"\r\n                    onChange={this.handleChangeEmail}\r\n                    name=\"email\"\r\n                    value={this.state.user.email}\r\n                    validators={['required', 'isEmail']}\r\n                    errorMessages={['this field is required', 'email is not valid']}\r\n                />\r\n\r\n                <Button type=\"submit\">Submit</Button>\r\n            </ValidatorForm>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default UserForm;"]},"metadata":{},"sourceType":"module"}