{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { assert } from './assert';\nimport { FieldFeedbacks } from './FieldFeedbacks';\nimport { FormWithConstraints } from './FormWithConstraints';\nimport { withValidateFieldEventEmitter } from './withValidateFieldEventEmitter';\nexport var Status;\n\n(function (Status) {\n  Status[Status[\"None\"] = 0] = \"None\";\n  Status[Status[\"Pending\"] = 1] = \"Pending\";\n  Status[Status[\"Rejected\"] = 2] = \"Rejected\";\n  Status[Status[\"Resolved\"] = 3] = \"Resolved\";\n})(Status || (Status = {}));\n\nclass AsyncComponent extends React.PureComponent {}\n\nexport class Async extends withValidateFieldEventEmitter(AsyncComponent) {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      status: Status.None\n    };\n\n    this.validate = input => {\n      const {\n        form,\n        fieldFeedbacks\n      } = this.context;\n      let validations;\n      const field = form.fieldsStore.getField(input.name);\n\n      if (fieldFeedbacks.props.stop === 'first' && field.hasFeedbacks(fieldFeedbacks.key) || fieldFeedbacks.props.stop === 'first-error' && field.hasErrors(fieldFeedbacks.key) || fieldFeedbacks.props.stop === 'first-warning' && field.hasWarnings(fieldFeedbacks.key) || fieldFeedbacks.props.stop === 'first-info' && field.hasInfos(fieldFeedbacks.key)) {\n        this.setState({\n          status: Status.None\n        });\n      } else {\n        validations = this._validate(input);\n      }\n\n      return validations;\n    };\n  }\n\n  getChildContext() {\n    return {\n      async: this\n    };\n  }\n\n  componentDidMount() {\n    this.context.fieldFeedbacks.addValidateFieldEventListener(this.validate);\n  }\n\n  componentWillUnmount() {\n    this.context.fieldFeedbacks.removeValidateFieldEventListener(this.validate);\n  }\n\n  async _validate(input) {\n    this.setState({\n      status: Status.Pending\n    });\n\n    try {\n      const value = await this.props.promise(input.value);\n      this.setState({\n        status: Status.Resolved,\n        value\n      });\n    } catch (e) {\n      this.setState({\n        status: Status.Rejected,\n        value: e\n      });\n    }\n\n    return this.emitValidateFieldEvent(input);\n  }\n\n  render() {\n    const {\n      props,\n      state\n    } = this;\n    let element = null;\n\n    switch (state.status) {\n      case Status.None:\n        break;\n\n      case Status.Pending:\n        if (props.pending) element = props.pending;\n        break;\n\n      case Status.Resolved:\n        if (props.then) element = props.then(state.value);\n        break;\n\n      case Status.Rejected:\n        if (props.catch) element = props.catch(state.value);\n        break;\n\n      default:\n        assert(false, `Unknown status: '${state.status}'`);\n    }\n\n    return element;\n  }\n\n}\nAsync.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired,\n  fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired\n};\nAsync.childContextTypes = {\n  async: PropTypes.instanceOf(Async).isRequired\n};","map":{"version":3,"sources":["../src/Async.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { assert } from './assert';\nimport { FieldFeedbacks, FieldFeedbacksChildContext } from './FieldFeedbacks';\nimport { FieldFeedbackValidation } from './FieldFeedbackValidation';\nimport { FormWithConstraints, FormWithConstraintsChildContext } from './FormWithConstraints';\nimport { InputElement } from './InputElement';\nimport { withValidateFieldEventEmitter } from './withValidateFieldEventEmitter';\n\nexport enum Status {\n  None,\n  Pending,\n  Rejected,\n  Resolved\n}\n\nexport interface AsyncProps<T> {\n  promise: (value: string) => Promise<T>;\n  pending?: React.ReactNode;\n  then?: (value: T) => React.ReactNode;\n  catch?: (reason: any) => React.ReactNode;\n}\n\ninterface AsyncState<T> {\n  status: Status;\n  value?: T;\n}\n\nexport interface AsyncChildContext {\n  async: Async<any>;\n}\n\nexport type AsyncContext = FormWithConstraintsChildContext & FieldFeedbacksChildContext;\n\n// [Asynchronous form errors and messages in AngularJS](https://jaysoo.ca/2014/10/14/async-form-errors-and-messages-in-angularjs/)\n// [Support for asynchronous values (like Promises and Observables)](https://github.com/facebook/react/issues/6481)\n// https://github.com/capaj/react-promise\n// [How to render promises in React](https://gist.github.com/hex13/6d46f8b54631871ea8bf87576b635c49)\n// Cannot be inside a separated npm package since FieldFeedback needs to attach itself to Async\nclass AsyncComponent<T = any> extends React.PureComponent<AsyncProps<T>, AsyncState<T>> {}\nexport class Async<T>\n  extends withValidateFieldEventEmitter<\n    // FieldFeedback returns FieldFeedbackValidation\n    FieldFeedbackValidation,\n    typeof AsyncComponent\n  >(AsyncComponent)\n  implements React.ChildContextProvider<AsyncChildContext> {\n  static contextTypes: React.ValidationMap<AsyncContext> = {\n    form: PropTypes.instanceOf(FormWithConstraints).isRequired,\n    fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired\n  };\n  context!: AsyncContext;\n\n  static childContextTypes: React.ValidationMap<AsyncChildContext> = {\n    async: PropTypes.instanceOf(Async).isRequired\n  };\n  getChildContext(): AsyncChildContext {\n    return {\n      async: this\n    };\n  }\n\n  state: AsyncState<T> = {\n    status: Status.None\n  };\n\n  componentDidMount() {\n    this.context.fieldFeedbacks.addValidateFieldEventListener(this.validate);\n  }\n\n  componentWillUnmount() {\n    this.context.fieldFeedbacks.removeValidateFieldEventListener(this.validate);\n  }\n\n  validate = (input: InputElement) => {\n    const { form, fieldFeedbacks } = this.context;\n\n    let validations;\n\n    const field = form.fieldsStore.getField(input.name)!;\n\n    if (\n      (fieldFeedbacks.props.stop === 'first' && field.hasFeedbacks(fieldFeedbacks.key)) ||\n      (fieldFeedbacks.props.stop === 'first-error' && field.hasErrors(fieldFeedbacks.key)) ||\n      (fieldFeedbacks.props.stop === 'first-warning' && field.hasWarnings(fieldFeedbacks.key)) ||\n      (fieldFeedbacks.props.stop === 'first-info' && field.hasInfos(fieldFeedbacks.key))\n    ) {\n      // Reset UI\n      this.setState({ status: Status.None });\n    } else {\n      validations = this._validate(input);\n    }\n\n    return validations;\n  };\n\n  async _validate(input: InputElement) {\n    this.setState({ status: Status.Pending });\n    try {\n      const value = await this.props.promise(input.value);\n      this.setState({ status: Status.Resolved, value });\n    } catch (e) {\n      this.setState({ status: Status.Rejected, value: e });\n    }\n\n    return this.emitValidateFieldEvent(input);\n  }\n\n  render() {\n    const { props, state } = this;\n    let element = null;\n\n    switch (state.status) {\n      case Status.None:\n        break;\n      case Status.Pending:\n        if (props.pending) element = props.pending;\n        break;\n      case Status.Resolved:\n        if (props.then) element = props.then(state.value);\n        break;\n      case Status.Rejected:\n        if (props.catch) element = props.catch(state.value);\n        break;\n      default:\n        assert(false, `Unknown status: '${state.status}'`);\n    }\n\n    return element;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}