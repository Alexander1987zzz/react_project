{"ast":null,"code":"import { clearArray } from './clearArray';\nimport { FieldFeedbackType } from './FieldFeedbackType';\nexport class Field {\n  constructor(name) {\n    this.name = name;\n    this.validations = [];\n  }\n\n  addOrReplaceValidation(validation) {\n    const i = this.validations.findIndex(_validation => _validation.key === validation.key);\n    if (i > -1) this.validations[i] = validation;else this.validations.push(validation);\n  }\n\n  clearValidations() {\n    clearArray(this.validations);\n  }\n\n  hasFeedbacksOfType(type, fieldFeedbacksKey) {\n    return this.validations.some(fieldFeedback => (fieldFeedbacksKey === undefined || fieldFeedback.key.startsWith(`${fieldFeedbacksKey}.`)) && fieldFeedback.type === type && fieldFeedback.show === true);\n  }\n\n  hasErrors(fieldFeedbacksKey) {\n    return this.hasFeedbacksOfType(FieldFeedbackType.Error, fieldFeedbacksKey);\n  }\n\n  hasWarnings(fieldFeedbacksKey) {\n    return this.hasFeedbacksOfType(FieldFeedbackType.Warning, fieldFeedbacksKey);\n  }\n\n  hasInfos(fieldFeedbacksKey) {\n    return this.hasFeedbacksOfType(FieldFeedbackType.Info, fieldFeedbacksKey);\n  }\n\n  hasFeedbacks(fieldFeedbacksKey) {\n    return this.hasErrors(fieldFeedbacksKey) || this.hasWarnings(fieldFeedbacksKey) || this.hasInfos(fieldFeedbacksKey);\n  }\n\n  isValid() {\n    return !this.hasErrors();\n  }\n\n}","map":{"version":3,"sources":["../src/Field.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,iBAAT,QAAkC,qBAAlC;AAKA,OAAM,MAAO,KAAP,CAAY;AAWhB,EAAA,WAAA,CAA4B,IAA5B,EAAwC;AAAZ,SAAA,IAAA,GAAA,IAAA;AAVZ,SAAA,WAAA,GAAyC,EAAzC;AAU4B;;AAE5C,EAAA,sBAAsB,CAAC,UAAD,EAAoC;AAExD,UAAM,CAAC,GAAG,KAAK,WAAL,CAAiB,SAAjB,CAA2B,WAAW,IAAI,WAAW,CAAC,GAAZ,KAAoB,UAAU,CAAC,GAAzE,CAAV;AACA,QAAI,CAAC,GAAG,CAAC,CAAT,EAAY,KAAK,WAAL,CAAiB,CAAjB,IAAsB,UAAtB,CAAZ,KACK,KAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACN;;AAED,EAAA,gBAAgB,GAAA;AACd,IAAA,UAAU,CAAC,KAAK,WAAN,CAAV;AACD;;AAED,EAAA,kBAAkB,CAAC,IAAD,EAA0B,iBAA1B,EAAoD;AACpE,WAAO,KAAK,WAAL,CAAiB,IAAjB,CACL,aAAa,IACX,CAAC,iBAAiB,KAAK,SAAtB,IACC,aAAa,CAAC,GAAd,CAAkB,UAAlB,CAA6B,GAAG,iBAAiB,GAAjD,CADF,KAEA,aAAa,CAAC,IAAd,KAAuB,IAFvB,IAGA,aAAa,CAAC,IAAd,KAAuB,IALpB,CAAP;AAOD;;AAED,EAAA,SAAS,CAAC,iBAAD,EAA2B;AAClC,WAAO,KAAK,kBAAL,CAAwB,iBAAiB,CAAC,KAA1C,EAAiD,iBAAjD,CAAP;AACD;;AAED,EAAA,WAAW,CAAC,iBAAD,EAA2B;AACpC,WAAO,KAAK,kBAAL,CAAwB,iBAAiB,CAAC,OAA1C,EAAmD,iBAAnD,CAAP;AACD;;AAED,EAAA,QAAQ,CAAC,iBAAD,EAA2B;AACjC,WAAO,KAAK,kBAAL,CAAwB,iBAAiB,CAAC,IAA1C,EAAgD,iBAAhD,CAAP;AACD;;AAED,EAAA,YAAY,CAAC,iBAAD,EAA2B;AACrC,WACE,KAAK,SAAL,CAAe,iBAAf,KACA,KAAK,WAAL,CAAiB,iBAAjB,CADA,IAEA,KAAK,QAAL,CAAc,iBAAd,CAHF;AAKD;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,CAAC,KAAK,SAAL,EAAR;AACD;;AAxDe","sourcesContent":["import { clearArray } from './clearArray';\nimport { FieldFeedbackType } from './FieldFeedbackType';\nimport { FieldFeedbackValidation } from './FieldFeedbackValidation';\nimport { HTMLInput, TextInput } from './InputElement';\n\n// Field is a better name than Input, [Django Form fields](https://docs.djangoproject.com/en/1.11/ref/forms/fields/)\nexport class Field {\n  public readonly validations: FieldFeedbackValidation[] = [];\n\n  // Can be useful for the user to get the DOM element\n  // https://github.com/tkrotoff/react-form-with-constraints/issues/41\n  //\n  // Populated by FormWithConstraints.validateField()\n  //\n  // Cannot be set as readonly :/\n  public element?: HTMLInput | TextInput;\n\n  constructor(public readonly name: string) {}\n\n  addOrReplaceValidation(validation: FieldFeedbackValidation) {\n    // [Update if exists or add new element to array of objects](https://stackoverflow.com/a/49375465/990356)\n    const i = this.validations.findIndex(_validation => _validation.key === validation.key);\n    if (i > -1) this.validations[i] = validation;\n    else this.validations.push(validation);\n  }\n\n  clearValidations() {\n    clearArray(this.validations);\n  }\n\n  hasFeedbacksOfType(type: FieldFeedbackType, fieldFeedbacksKey?: string) {\n    return this.validations.some(\n      fieldFeedback =>\n        (fieldFeedbacksKey === undefined ||\n          fieldFeedback.key.startsWith(`${fieldFeedbacksKey}.`)) &&\n        fieldFeedback.type === type &&\n        fieldFeedback.show === true\n    );\n  }\n\n  hasErrors(fieldFeedbacksKey?: string) {\n    return this.hasFeedbacksOfType(FieldFeedbackType.Error, fieldFeedbacksKey);\n  }\n\n  hasWarnings(fieldFeedbacksKey?: string) {\n    return this.hasFeedbacksOfType(FieldFeedbackType.Warning, fieldFeedbacksKey);\n  }\n\n  hasInfos(fieldFeedbacksKey?: string) {\n    return this.hasFeedbacksOfType(FieldFeedbackType.Info, fieldFeedbacksKey);\n  }\n\n  hasFeedbacks(fieldFeedbacksKey?: string) {\n    return (\n      this.hasErrors(fieldFeedbacksKey) ||\n      this.hasWarnings(fieldFeedbacksKey) ||\n      this.hasInfos(fieldFeedbacksKey)\n    );\n  }\n\n  isValid() {\n    return !this.hasErrors();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}