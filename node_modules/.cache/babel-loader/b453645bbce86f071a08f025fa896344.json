{"ast":null,"code":"export class IValidityState {\n  constructor(validity) {\n    this.badInput = validity.badInput;\n    this.customError = validity.customError;\n    this.patternMismatch = validity.patternMismatch;\n    this.rangeOverflow = validity.rangeOverflow;\n    this.rangeUnderflow = validity.rangeUnderflow;\n    this.stepMismatch = validity.stepMismatch;\n    this.tooLong = validity.tooLong;\n    this.tooShort = validity.tooShort;\n    this.typeMismatch = validity.typeMismatch;\n    this.valid = validity.valid;\n    this.valueMissing = validity.valueMissing;\n  }\n\n}\nexport function isHTMLInput(input) {\n  return input.props === undefined;\n}\nexport class InputElement {\n  constructor(input) {\n    if (isHTMLInput(input)) {\n      this.name = input.name;\n      this.type = input.type;\n      this.value = input.value;\n      this.validity = new IValidityState(input.validity);\n      this.validationMessage = input.validationMessage;\n    } else {\n      this.name = input.props.name;\n      this.type = undefined;\n      this.value = input.props.value;\n      this.validity = undefined;\n      this.validationMessage = undefined;\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/InputElement.ts"],"names":[],"mappings":"AAaA,OAAM,MAAO,cAAP,CAAqB;AAazB,EAAA,WAAA,CAAY,QAAZ,EAAmC;AACjC,SAAK,QAAL,GAAgB,QAAQ,CAAC,QAAzB;AACA,SAAK,WAAL,GAAmB,QAAQ,CAAC,WAA5B;AACA,SAAK,eAAL,GAAuB,QAAQ,CAAC,eAAhC;AACA,SAAK,aAAL,GAAqB,QAAQ,CAAC,aAA9B;AACA,SAAK,cAAL,GAAsB,QAAQ,CAAC,cAA/B;AACA,SAAK,YAAL,GAAoB,QAAQ,CAAC,YAA7B;AACA,SAAK,OAAL,GAAe,QAAQ,CAAC,OAAxB;AACA,SAAK,QAAL,GAAgB,QAAQ,CAAC,QAAzB;AACA,SAAK,YAAL,GAAoB,QAAQ,CAAC,YAA7B;AACA,SAAK,KAAL,GAAa,QAAQ,CAAC,KAAtB;AACA,SAAK,YAAL,GAAoB,QAAQ,CAAC,YAA7B;AACD;;AAzBwB;AA6C3B,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAmD;AACvD,SAAQ,KAAa,CAAC,KAAd,KAAwB,SAAhC;AACD;AAKD,OAAM,MAAO,YAAP,CAAmB;AAOvB,EAAA,WAAA,CAAY,KAAZ,EAAyC;AACvC,QAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACtB,WAAK,IAAL,GAAY,KAAK,CAAC,IAAlB;AACA,WAAK,IAAL,GAAY,KAAK,CAAC,IAAlB;AACA,WAAK,KAAL,GAAa,KAAK,CAAC,KAAnB;AASA,WAAK,QAAL,GAAgB,IAAI,cAAJ,CAAmB,KAAK,CAAC,QAAzB,CAAhB;AAEA,WAAK,iBAAL,GAAyB,KAAK,CAAC,iBAA/B;AACD,KAfD,MAeO;AACL,WAAK,IAAL,GAAY,KAAK,CAAC,KAAN,CAAY,IAAxB;AACA,WAAK,IAAL,GAAY,SAAZ;AACA,WAAK,KAAL,GAAa,KAAK,CAAC,KAAN,CAAY,KAAzB;AACA,WAAK,QAAL,GAAgB,SAAhB;AACA,WAAK,iBAAL,GAAyB,SAAzB;AACD;AACF;;AA9BsB","sourcesContent":["// [React Native TextInput](https://facebook.github.io/react-native/docs/textinput.html)\n// Here so we don't have to \"import { TextInput } from 'react-native'\" and depend on React Native\nexport interface TextInput {\n  //value?: string; // Always undefined, use instead props.value\n  props: {\n    name: string;\n    value?: string;\n  };\n}\n\n// Cannot clone ValidityState using JSON.parse(JSON.stringify(input.validity)),\n// results in an empty object ({}) under Chrome 66, Firefox 60 and Safari 10.1.2\n// so let's manually clone it.\nexport class IValidityState implements ValidityState {\n  readonly badInput: boolean;\n  readonly customError: boolean;\n  readonly patternMismatch: boolean;\n  readonly rangeOverflow: boolean;\n  readonly rangeUnderflow: boolean;\n  readonly stepMismatch: boolean;\n  readonly tooLong: boolean;\n  readonly tooShort: boolean;\n  readonly typeMismatch: boolean;\n  readonly valid: boolean;\n  readonly valueMissing: boolean;\n\n  constructor(validity: ValidityState) {\n    this.badInput = validity.badInput;\n    this.customError = validity.customError;\n    this.patternMismatch = validity.patternMismatch;\n    this.rangeOverflow = validity.rangeOverflow;\n    this.rangeUnderflow = validity.rangeUnderflow;\n    this.stepMismatch = validity.stepMismatch;\n    this.tooLong = validity.tooLong;\n    this.tooShort = validity.tooShort;\n    this.typeMismatch = validity.typeMismatch;\n    this.valid = validity.valid;\n    this.valueMissing = validity.valueMissing;\n  }\n}\n\n// Type for Field.element\nexport type HTMLInput = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n// Minimum interface accepted by validateFields() and friends\nexport interface IHTMLInput {\n  readonly name: string;\n  readonly type: string; // Not needed internally, can be text, radio...\n  readonly value: string;\n\n  // validity and validationMessage available for (lib.dom.d.ts):\n  // HTMLButtonElement, HTMLFieldSetElement, HTMLInputElement, HTMLObjectElement,\n  // HTMLOutputElement, HTMLSelectElement, HTMLTextAreaElement\n  // ValidityState is supported by IE >= 10\n  readonly validity: IValidityState;\n  readonly validationMessage: string;\n}\n\nexport function isHTMLInput(input: IHTMLInput | TextInput): input is IHTMLInput {\n  return (input as any).props === undefined;\n}\n\n// Need to duplicate the input when the user changes rapidly the input\n// otherwise we will treat only the last input value instead of every input value change\n// Cannot be named Field or Input: already taken\nexport class InputElement implements IHTMLInput {\n  readonly name: string;\n  readonly type: string;\n  readonly value: string;\n  readonly validity: IValidityState;\n  readonly validationMessage: string;\n\n  constructor(input: IHTMLInput | TextInput) {\n    if (isHTMLInput(input)) {\n      this.name = input.name;\n      this.type = input.type;\n      this.value = input.value;\n\n      // Solution 1: no clone, then .mock.calls never ends with ValidityState inside FormWithConstraints.test.tsx in v0.8\n      //this.validity = input.validity;\n\n      // Solution 2: JSON does not work to clone ValidityState (results in an empty object)\n      //this.validity = JSON.parse(JSON.stringify(input.validity));\n\n      // Solution 3: manually clone ValidityState\n      this.validity = new IValidityState(input.validity as ValidityState);\n\n      this.validationMessage = input.validationMessage;\n    } else {\n      this.name = input.props.name;\n      this.type = undefined as any;\n      this.value = input.props.value!; // Tested: TextInput props.value is always a string and never undefined (empty string instead)\n      this.validity = undefined as any;\n      this.validationMessage = undefined as any;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}