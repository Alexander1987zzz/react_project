{"ast":null,"code":"var _jsxFileName = \"D:\\\\11\\\\react_project\\\\src\\\\components\\\\UserForm2.js\";\nimport React, { Component } from 'react';\nimport { validEmpty, validNameMaxLength, validName, validDate, validEmail } from \"./validators/validator\";\nimport { Button, Form, Label } from \"reactstrap\";\nimport { FieldFeedback, FieldFeedbacks, FormControl, TextField } from 'react-form-with-constraints-material-ui';\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UserForm extends Component {\n  constructor(props) {\n    super(props);\n    this.validationState = {\n      firstName: {\n        errors: [],\n        validators: [validEmpty, validName, validNameMaxLength]\n      },\n      lastName: {\n        errors: [],\n        validators: [validEmpty, validName, validNameMaxLength]\n      },\n      email: {\n        errors: [],\n        validators: [validEmpty, validEmail]\n      },\n      birthDate: {\n        errors: [],\n        validators: [validEmpty, validDate]\n      },\n      allField: {\n        errors: []\n      }\n    };\n    this.emptyItem = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      birthDate: ''\n    };\n    this.state = {\n      item: this.emptyItem,\n      validation: this.validationState,\n      isValidForm: false\n    };\n    this.updateInput = this.updateInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  updateInput(event) {\n    this.setState({\n      firstName: event.target.value\n    });\n  }\n\n  handleSubmit() {\n    alert('Your input value is: ' + this.state.firstName);\n  }\n\n  errorRender(validationFieldState) {\n    if (validationFieldState.errors.length) {\n      return validationFieldState.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-field\",\n        children: [\"- \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 64\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n  /*async componentDidMount() {\r\n      if (this.props.match.params.id !== 'new') {\r\n          /!*const user = await (await fetch(`/api/users?id=${this.props.match.params.id}`)).json();*!/\r\n          this.initValidation(user);\r\n      }\r\n  }*/\n\n\n  initValidation(user) {\n    const validation = { ...this.state.validation\n    };\n\n    for (let key in user) {\n      if (key !== 'id') {\n        validation[key] = this.validation(key, user[key].toString());\n      }\n    }\n\n    const isValidForm = this.getValidationStatus(validation);\n    this.setState({\n      item: user,\n      isValidForm,\n      validation\n    });\n  }\n\n  validation(fieldName, fieldValue) {\n    const self = this;\n    const fieldValidation = { ...self.state.validation[fieldName],\n      errors: []\n    };\n    fieldValidation.validators.forEach(validator => {\n      const errors = fieldValidation.errors;\n      fieldValidation.errors = [...errors, ...validator(fieldValue)];\n    });\n    return fieldValidation;\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = { ...this.state.item\n    };\n    item[name] = value;\n    const validation = { ...this.state.validation,\n      [name]: this.validation(name, value.toString())\n    };\n    validation.allField.errors = [];\n    const isValidForm = this.getValidationStatus(validation);\n    this.setState({ ...this.state,\n      validation,\n      item,\n      isValidForm\n    });\n  }\n\n  getValidationStatus(validation) {\n    return Object.values(validation).every(validField => !validField.errors.length);\n  }\n  /*async handleSubmit(event) {\r\n      const self = this;\r\n      event.preventDefault();\r\n      const {item} = this.state;\r\n      const userData = {\r\n          firstName: item.firstName,\r\n          lastName: item.lastName,\r\n          email: item.email,\r\n          birthDate: item.birthDate\r\n      }\r\n        const endpoint = +item.id ? `/api/users?id=${item.id}` : '/api/users';\r\n        await fetch(endpoint, {\r\n          method: (item.id) ? 'PUT' : 'POST',\r\n          headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(userData),\r\n      }).then(response => {\r\n          if (![400, 500].includes(+response.status)) {\r\n              window.location.href = 'http://34.88.120.86:3000/users';\r\n              return null;\r\n          }\r\n          return response.text();\r\n      }).then(message => {\r\n          const validation = {...self.state.validation, allField: {errors: [message]}};\r\n          self.setState({...self.state, validation});\r\n      });\r\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: this.state.password,\n        onChange: this.handleChange,\n        required: true,\n        pattern: \".{5,}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FieldFeedbacks, {\n        for: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(FieldFeedback, {\n          when: \"valueMissing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FieldFeedback, {\n          when: \"patternMismatch\",\n          children: \"Should be at least 5 characters long\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FieldFeedback, {\n          when: value => !/\\d/.test(value),\n          warning: true,\n          children: \"Should contain numbers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FieldFeedback, {\n          when: value => !/[a-z]/.test(value),\n          warning: true,\n          children: \"Should contain small letters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FieldFeedback, {\n          when: value => !/[A-Z]/.test(value),\n          warning: true,\n          children: \"Should contain capital letters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserForm;","map":{"version":3,"sources":["D:/11/react_project/src/components/UserForm2.js"],"names":["React","Component","validEmpty","validNameMaxLength","validName","validDate","validEmail","Button","Form","Label","FieldFeedback","FieldFeedbacks","FormControl","TextField","InputLabel","Input","FormHelperText","UserForm","constructor","props","validationState","firstName","errors","validators","lastName","email","birthDate","allField","emptyItem","state","item","validation","isValidForm","updateInput","bind","handleSubmit","handleChange","event","setState","target","value","alert","errorRender","validationFieldState","length","map","error","initValidation","user","key","toString","getValidationStatus","fieldName","fieldValue","self","fieldValidation","forEach","validator","name","Object","values","every","validField","render","password","test"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nimport {validEmpty, validNameMaxLength, validName, validDate, validEmail} from \"./validators/validator\";\r\nimport {Button, Form, Label} from \"reactstrap\";\r\n\r\n\r\nimport {\r\n\r\n    FieldFeedback,\r\n    FieldFeedbacks, FormControl,\r\n\r\n    TextField\r\n} from 'react-form-with-constraints-material-ui';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\n\r\nclass UserForm extends Component {\r\n    validationState = {\r\n        firstName: {\r\n            errors: [],\r\n            validators: [validEmpty, validName, validNameMaxLength]\r\n        },\r\n        lastName: {\r\n            errors: [],\r\n            validators: [validEmpty, validName, validNameMaxLength],\r\n        },\r\n        email: {\r\n            errors: [],\r\n            validators: [validEmpty, validEmail],\r\n        },\r\n        birthDate: {\r\n            errors: [],\r\n            validators: [validEmpty, validDate],\r\n        },\r\n        allField: {\r\n            errors: []\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    emptyItem = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        birthDate: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyItem,\r\n            validation: this.validationState,\r\n            isValidForm: false\r\n        };\r\n        this.updateInput = this.updateInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    updateInput(event) {\r\n        this.setState({firstName: event.target.value})\r\n    }\r\n\r\n    handleSubmit() {\r\n        alert('Your input value is: ' + this.state.firstName)\r\n    }\r\n\r\n    errorRender(validationFieldState) {\r\n        if (validationFieldState.errors.length) {\r\n            return validationFieldState.errors.map((error) => (<div className=\"error-field\">- {error}</div>));\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    /*async componentDidMount() {\r\n        if (this.props.match.params.id !== 'new') {\r\n            /!*const user = await (await fetch(`/api/users?id=${this.props.match.params.id}`)).json();*!/\r\n            this.initValidation(user);\r\n        }\r\n    }*/\r\n\r\n    initValidation(user) {\r\n        const validation = {...this.state.validation};\r\n        for (let key in user) {\r\n            if (key !== 'id') {\r\n                validation[key] = this.validation(key, user[key].toString());\r\n            }\r\n        }\r\n\r\n        const isValidForm = this.getValidationStatus(validation);\r\n        this.setState({item: user, isValidForm, validation});\r\n    }\r\n\r\n    validation(fieldName, fieldValue) {\r\n        const self = this;\r\n        const fieldValidation = {...self.state.validation[fieldName], errors: []};\r\n        fieldValidation.validators.forEach(validator => {\r\n            const errors = fieldValidation.errors;\r\n            fieldValidation.errors = [...errors, ...validator(fieldValue)];\r\n        });\r\n\r\n        return fieldValidation;\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        const validation = {\r\n            ...this.state.validation,\r\n            [name]: this.validation(name, value.toString())\r\n        };\r\n        validation.allField.errors = [];\r\n        const isValidForm = this.getValidationStatus(validation);\r\n        this.setState({...this.state, validation, item, isValidForm});\r\n    }\r\n\r\n    getValidationStatus(validation) {\r\n        return Object.values(validation)\r\n            .every(validField => !validField.errors.length);\r\n    }\r\n\r\n    /*async handleSubmit(event) {\r\n        const self = this;\r\n        event.preventDefault();\r\n        const {item} = this.state;\r\n        const userData = {\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n            email: item.email,\r\n            birthDate: item.birthDate\r\n        }\r\n\r\n        const endpoint = +item.id ? `/api/users?id=${item.id}` : '/api/users';\r\n\r\n        await fetch(endpoint, {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(userData),\r\n        }).then(response => {\r\n            if (![400, 500].includes(+response.status)) {\r\n                window.location.href = 'http://34.88.120.86:3000/users';\r\n                return null;\r\n            }\r\n            return response.text();\r\n        }).then(message => {\r\n            const validation = {...self.state.validation, allField: {errors: [message]}};\r\n            self.setState({...self.state, validation});\r\n        });\r\n    }*/\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <input type=\"password\" name=\"password\"\r\n                       value={this.state.password} onChange={this.handleChange}\r\n                       required pattern=\".{5,}\" />\r\n                <FieldFeedbacks for=\"password\">\r\n                    <FieldFeedback when=\"valueMissing\" />\r\n                    <FieldFeedback when=\"patternMismatch\">\r\n                        Should be at least 5 characters long\r\n                    </FieldFeedback>\r\n                    <FieldFeedback when={value => !/\\d/.test(value)} warning>\r\n                        Should contain numbers\r\n                    </FieldFeedback>\r\n                    <FieldFeedback when={value => !/[a-z]/.test(value)} warning>\r\n                        Should contain small letters\r\n                    </FieldFeedback>\r\n                    <FieldFeedback when={value => !/[A-Z]/.test(value)} warning>\r\n                        Should contain capital letters\r\n                    </FieldFeedback>\r\n                </FieldFeedbacks>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserForm;"]},"metadata":{},"sourceType":"module"}