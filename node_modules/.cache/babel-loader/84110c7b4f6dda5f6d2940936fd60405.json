{"ast":null,"code":"var _jsxFileName = \"D:\\\\11\\\\react_project\\\\src\\\\components\\\\UserForm.js\";\nimport React, { Component } from 'react';\nimport Container from \"@material-ui/core/Container\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Input from \"@material-ui/core/Input\";\nimport { validEmpty, validNameMaxLength, validName, validDate, validEmail } from \"./validators/validator\";\nimport { Button, Form, Label } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UserForm extends Component {\n  constructor(props) {\n    super(props);\n    this.validationState = {\n      firstName: {\n        errors: [],\n        validators: [validEmpty, validName, validNameMaxLength]\n      },\n      lastName: {\n        errors: [],\n        validators: [validEmpty, validName, validNameMaxLength]\n      },\n      email: {\n        errors: [],\n        validators: [validEmpty, validEmail]\n      },\n      birthDate: {\n        errors: [],\n        validators: [validEmpty, validDate]\n      },\n      allField: {\n        errors: []\n      }\n    };\n    this.emptyItem = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      birthDate: ''\n    };\n    this.state = {\n      item: this.emptyItem,\n      validation: this.validationState,\n      isValidForm: false\n    };\n    this.updateInput = this.updateInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  updateInput(event) {\n    this.setState({\n      firstName: event.target.value\n    });\n  }\n\n  handleSubmit() {\n    alert('Your input value is: ' + this.state.firstName);\n  }\n\n  errorRender(validationFieldState) {\n    if (validationFieldState.errors.length) {\n      return validationFieldState.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-field\",\n        children: [\"- \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 64\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n  /*async componentDidMount() {\r\n      if (this.props.match.params.id !== 'new') {\r\n          /!*const user = await (await fetch(`/api/users?id=${this.props.match.params.id}`)).json();*!/\r\n          this.initValidation(user);\r\n      }\r\n  }*/\n\n\n  initValidation(user) {\n    const validation = { ...this.state.validation\n    };\n\n    for (let key in user) {\n      if (key !== 'id') {\n        validation[key] = this.validation(key, user[key].toString());\n      }\n    }\n\n    const isValidForm = this.getValidationStatus(validation);\n    this.setState({\n      item: user,\n      isValidForm,\n      validation\n    });\n  }\n\n  validation(fieldName, fieldValue) {\n    const self = this;\n    const fieldValidation = { ...self.state.validation[fieldName],\n      errors: []\n    };\n    fieldValidation.validators.forEach(validator => {\n      const errors = fieldValidation.errors;\n      fieldValidation.errors = [...errors, ...validator(fieldValue)];\n    });\n    return fieldValidation;\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = { ...this.state.item\n    };\n    item[name] = value;\n    const validation = { ...this.state.validation,\n      [name]: this.validation(name, value.toString())\n    };\n    validation.allField.errors = [];\n    const isValidForm = this.getValidationStatus(validation);\n    this.setState({ ...this.state,\n      validation,\n      item,\n      isValidForm\n    });\n  }\n\n  getValidationStatus(validation) {\n    return Object.values(validation).every(validField => !validField.errors.length);\n  }\n  /*async handleSubmit(event) {\r\n      const self = this;\r\n      event.preventDefault();\r\n      const {item} = this.state;\r\n      const userData = {\r\n          firstName: item.firstName,\r\n          lastName: item.lastName,\r\n          email: item.email,\r\n          birthDate: item.birthDate\r\n      }\r\n        const endpoint = +item.id ? `/api/users?id=${item.id}` : '/api/users';\r\n        await fetch(endpoint, {\r\n          method: (item.id) ? 'PUT' : 'POST',\r\n          headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(userData),\r\n      }).then(response => {\r\n          if (![400, 500].includes(+response.status)) {\r\n              window.location.href = 'http://34.88.120.86:3000/users';\r\n              return null;\r\n          }\r\n          return response.text();\r\n      }).then(message => {\r\n          const validation = {...self.state.validation, allField: {errors: [message]}};\r\n          self.setState({...self.state, validation});\r\n      });\r\n  }*/\n\n\n  render() {\n    const {\n      item,\n      validation,\n      isValidForm\n    } = this.state;\n\n    const title = /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: item.id ? 'Edit User' : 'Add User'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 23\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [title, /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"firstName\",\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"firstName\",\n              id: \"firstName\",\n              value: '',\n              onChange: this.updateInput,\n              autoComplete: \"firstName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, this), this.errorRender(validation.firstName)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"lastName\",\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"lastName\",\n              id: \"lastName\",\n              value: item.lastName || '',\n              onChange: this.handleChange,\n              autoComplete: \"lastName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 25\n            }, this), this.errorRender(validation.lastName)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"email\",\n              id: \"email\",\n              value: item.email || '',\n              onChange: this.handleChange,\n              autoComplete: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 25\n            }, this), this.errorRender(validation.email)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"birthDate\",\n              children: \"Birth Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"birthDate\",\n              id: \"birthDate\",\n              value: item.birthDate || '',\n              onChange: this.handleChange,\n              autoComplete: \"birthDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 25\n            }, this), this.errorRender(validation.birthDate)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [this.errorRender(validation.allField), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              type: \"submit\",\n              onClick: this.handleChange,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 25\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              to: \"/users\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default UserForm;","map":{"version":3,"sources":["D:/11/react_project/src/components/UserForm.js"],"names":["React","Component","Container","FormGroup","Input","validEmpty","validNameMaxLength","validName","validDate","validEmail","Button","Form","Label","UserForm","constructor","props","validationState","firstName","errors","validators","lastName","email","birthDate","allField","emptyItem","state","item","validation","isValidForm","updateInput","bind","handleSubmit","handleChange","event","setState","target","value","alert","errorRender","validationFieldState","length","map","error","initValidation","user","key","toString","getValidationStatus","fieldName","fieldValue","self","fieldValidation","forEach","validator","name","Object","values","every","validField","render","title","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,SAAQC,UAAR,EAAoBC,kBAApB,EAAwCC,SAAxC,EAAmDC,SAAnD,EAA8DC,UAA9D,QAA+E,wBAA/E;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAkC,YAAlC;;;;AAEA,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAkC7Ba,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAjCnBC,eAiCmB,GAjCD;AACdC,MAAAA,SAAS,EAAE;AACPC,QAAAA,MAAM,EAAE,EADD;AAEPC,QAAAA,UAAU,EAAE,CAACd,UAAD,EAAaE,SAAb,EAAwBD,kBAAxB;AAFL,OADG;AAKdc,MAAAA,QAAQ,EAAE;AACNF,QAAAA,MAAM,EAAE,EADF;AAENC,QAAAA,UAAU,EAAE,CAACd,UAAD,EAAaE,SAAb,EAAwBD,kBAAxB;AAFN,OALI;AASde,MAAAA,KAAK,EAAE;AACHH,QAAAA,MAAM,EAAE,EADL;AAEHC,QAAAA,UAAU,EAAE,CAACd,UAAD,EAAaI,UAAb;AAFT,OATO;AAada,MAAAA,SAAS,EAAE;AACPJ,QAAAA,MAAM,EAAE,EADD;AAEPC,QAAAA,UAAU,EAAE,CAACd,UAAD,EAAYG,SAAZ;AAFL,OAbG;AAiBde,MAAAA,QAAQ,EAAE;AACNL,QAAAA,MAAM,EAAE;AADF;AAjBI,KAiCC;AAAA,SAPnBM,SAOmB,GAPP;AACRP,MAAAA,SAAS,EAAE,EADH;AAERG,MAAAA,QAAQ,EAAE,EAFF;AAGRC,MAAAA,KAAK,EAAE,EAHC;AAIRC,MAAAA,SAAS,EAAE;AAJH,KAOO;AAEf,SAAKG,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KAAKF,SADF;AAETG,MAAAA,UAAU,EAAE,KAAKX,eAFR;AAGTY,MAAAA,WAAW,EAAE;AAHJ,KAAb;AAKA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AAEA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AACDD,EAAAA,WAAW,CAACI,KAAD,EAAO;AACd,SAAKC,QAAL,CAAc;AAACjB,MAAAA,SAAS,EAAGgB,KAAK,CAACE,MAAN,CAAaC;AAA1B,KAAd;AACH;;AAEDL,EAAAA,YAAY,GAAE;AACVM,IAAAA,KAAK,CAAC,0BAA0B,KAAKZ,KAAL,CAAWR,SAAtC,CAAL;AACH;;AAEDqB,EAAAA,WAAW,CAACC,oBAAD,EAAuB;AAC9B,QAAIA,oBAAoB,CAACrB,MAArB,CAA4BsB,MAAhC,EAAwC;AACpC,aAAOD,oBAAoB,CAACrB,MAArB,CAA4BuB,GAA5B,CAAiCC,KAAD,iBAAY;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,yBAAgCA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cAA5C,CAAP;AACH;;AACD,wBAAO,qCAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAEIC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,UAAMjB,UAAU,GAAG,EAAC,GAAG,KAAKF,KAAL,CAAWE;AAAf,KAAnB;;AACA,SAAK,IAAIkB,GAAT,IAAgBD,IAAhB,EAAsB;AAClB,UAAIC,GAAG,KAAK,IAAZ,EAAkB;AACdlB,QAAAA,UAAU,CAACkB,GAAD,CAAV,GAAkB,KAAKlB,UAAL,CAAgBkB,GAAhB,EAAqBD,IAAI,CAACC,GAAD,CAAJ,CAAUC,QAAV,EAArB,CAAlB;AACH;AACJ;;AAED,UAAMlB,WAAW,GAAG,KAAKmB,mBAAL,CAAyBpB,UAAzB,CAApB;AACA,SAAKO,QAAL,CAAc;AAACR,MAAAA,IAAI,EAAEkB,IAAP;AAAahB,MAAAA,WAAb;AAA0BD,MAAAA;AAA1B,KAAd;AACH;;AAEDA,EAAAA,UAAU,CAACqB,SAAD,EAAYC,UAAZ,EAAuB;AAC7B,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMC,eAAe,GAAG,EAAC,GAAGD,IAAI,CAACzB,KAAL,CAAWE,UAAX,CAAsBqB,SAAtB,CAAJ;AAAsC9B,MAAAA,MAAM,EAAE;AAA9C,KAAxB;AACAiC,IAAAA,eAAe,CAAChC,UAAhB,CAA2BiC,OAA3B,CAAmCC,SAAS,IAAI;AAC5C,YAAMnC,MAAM,GAAGiC,eAAe,CAACjC,MAA/B;AACAiC,MAAAA,eAAe,CAACjC,MAAhB,GAAyB,CAAC,GAAGA,MAAJ,EAAY,GAAGmC,SAAS,CAACJ,UAAD,CAAxB,CAAzB;AACH,KAHD;AAKA,WAAOE,eAAP;AACH;;AACDnB,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,UAAME,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMkB,IAAI,GAAGnB,MAAM,CAACmB,IAApB;AACA,QAAI5B,IAAI,GAAG,EAAC,GAAG,KAAKD,KAAL,CAAWC;AAAf,KAAX;AACAA,IAAAA,IAAI,CAAC4B,IAAD,CAAJ,GAAalB,KAAb;AACA,UAAMT,UAAU,GAAG,EACf,GAAG,KAAKF,KAAL,CAAWE,UADC;AAEf,OAAC2B,IAAD,GAAQ,KAAK3B,UAAL,CAAgB2B,IAAhB,EAAsBlB,KAAK,CAACU,QAAN,EAAtB;AAFO,KAAnB;AAIAnB,IAAAA,UAAU,CAACJ,QAAX,CAAoBL,MAApB,GAA6B,EAA7B;AACA,UAAMU,WAAW,GAAG,KAAKmB,mBAAL,CAAyBpB,UAAzB,CAApB;AACA,SAAKO,QAAL,CAAc,EAAC,GAAG,KAAKT,KAAT;AAAgBE,MAAAA,UAAhB;AAA4BD,MAAAA,IAA5B;AAAkCE,MAAAA;AAAlC,KAAd;AACH;;AAEDmB,EAAAA,mBAAmB,CAACpB,UAAD,EAAa;AAC5B,WAAO4B,MAAM,CAACC,MAAP,CAAc7B,UAAd,EACF8B,KADE,CACIC,UAAU,IAAI,CAACA,UAAU,CAACxC,MAAX,CAAkBsB,MADrC,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIImB,EAAAA,MAAM,GAAG;AACL,UAAM;AAACjC,MAAAA,IAAD;AAAOC,MAAAA,UAAP;AAAmBC,MAAAA;AAAnB,QAAkC,KAAKH,KAA7C;;AACA,UAAMmC,KAAK,gBAAG;AAAA,gBAAKlC,IAAI,CAACmC,EAAL,GAAU,WAAV,GAAwB;AAA7B;AAAA;AAAA;AAAA;AAAA,YAAd;;AAEA,wBAAO;AAAA,6BACH,QAAC,SAAD;AAAA,mBACKD,KADL,eAEI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAE,KAAK7B,YAArB;AAAA,kCACI,QAAC,SAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,WAAxB;AAAoC,cAAA,EAAE,EAAC,WAAvC;AAAmD,cAAA,KAAK,EAAE,EAA1D;AACO,cAAA,QAAQ,EAAE,KAAKF,WADtB;AACmC,cAAA,YAAY,EAAC;AADhD;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAIK,KAAKS,WAAL,CAAiBX,UAAU,CAACV,SAA5B,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAOI,QAAC,SAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,UAAxB;AAAmC,cAAA,EAAE,EAAC,UAAtC;AAAiD,cAAA,KAAK,EAAES,IAAI,CAACN,QAAL,IAAiB,EAAzE;AACO,cAAA,QAAQ,EAAE,KAAKY,YADtB;AACoC,cAAA,YAAY,EAAC;AADjD;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAIK,KAAKM,WAAL,CAAiBX,UAAU,CAACP,QAA5B,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAaI,QAAC,SAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,OAAxB;AAAgC,cAAA,EAAE,EAAC,OAAnC;AAA2C,cAAA,KAAK,EAAEM,IAAI,CAACL,KAAL,IAAc,EAAhE;AACO,cAAA,QAAQ,EAAE,KAAKW,YADtB;AACoC,cAAA,YAAY,EAAC;AADjD;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAIK,KAAKM,WAAL,CAAiBX,UAAU,CAACN,KAA5B,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbJ,eAmBI,QAAC,SAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,WAAxB;AAAoC,cAAA,EAAE,EAAC,WAAvC;AAAmD,cAAA,KAAK,EAAEK,IAAI,CAACJ,SAAL,IAAkB,EAA5E;AACO,cAAA,QAAQ,EAAE,KAAKU,YADtB;AACoC,cAAA,YAAY,EAAC;AADjD;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAIK,KAAKM,WAAL,CAAiBX,UAAU,CAACL,SAA5B,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBJ,eAyBI,QAAC,SAAD;AAAA,uBACK,KAAKgB,WAAL,CAAiBX,UAAU,CAACJ,QAA5B,CADL,eAEI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAwB,cAAA,IAAI,EAAC,QAA7B;AAAsC,cAAA,OAAO,EAAE,KAAKS,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAEqF,GAFrF,eAGI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,WAAd;AAA2B,cAAA,EAAE,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAoCH;;AAvL4B;;AA0LjC,eAAenB,QAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport {validEmpty, validNameMaxLength, validName, validDate, validEmail} from \"./validators/validator\";\r\nimport {Button, Form, Label} from \"reactstrap\";\r\n\r\nclass UserForm extends Component {\r\n    validationState = {\r\n        firstName: {\r\n            errors: [],\r\n            validators: [validEmpty, validName, validNameMaxLength]\r\n        },\r\n        lastName: {\r\n            errors: [],\r\n            validators: [validEmpty, validName, validNameMaxLength],\r\n        },\r\n        email: {\r\n            errors: [],\r\n            validators: [validEmpty, validEmail],\r\n        },\r\n        birthDate: {\r\n            errors: [],\r\n            validators: [validEmpty,validDate],\r\n        },\r\n        allField: {\r\n            errors: []\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    emptyItem = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        birthDate: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyItem,\r\n            validation: this.validationState,\r\n            isValidForm: false\r\n        };\r\n        this.updateInput = this.updateInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    updateInput(event){\r\n        this.setState({firstName : event.target.value})\r\n    }\r\n\r\n    handleSubmit(){\r\n        alert('Your input value is: ' + this.state.firstName)\r\n    }\r\n\r\n    errorRender(validationFieldState) {\r\n        if (validationFieldState.errors.length) {\r\n            return validationFieldState.errors.map((error) => (<div className=\"error-field\">- {error}</div>));\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    /*async componentDidMount() {\r\n        if (this.props.match.params.id !== 'new') {\r\n            /!*const user = await (await fetch(`/api/users?id=${this.props.match.params.id}`)).json();*!/\r\n            this.initValidation(user);\r\n        }\r\n    }*/\r\n\r\n    initValidation(user) {\r\n        const validation = {...this.state.validation};\r\n        for (let key in user) {\r\n            if (key !== 'id') {\r\n                validation[key] = this.validation(key, user[key].toString());\r\n            }\r\n        }\r\n\r\n        const isValidForm = this.getValidationStatus(validation);\r\n        this.setState({item: user, isValidForm, validation});\r\n    }\r\n\r\n    validation(fieldName, fieldValue){\r\n        const self = this;\r\n        const fieldValidation = {...self.state.validation[fieldName], errors: []};\r\n        fieldValidation.validators.forEach(validator => {\r\n            const errors = fieldValidation.errors;\r\n            fieldValidation.errors = [...errors, ...validator(fieldValue)];\r\n        });\r\n\r\n        return fieldValidation;\r\n    }\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        const validation = {\r\n            ...this.state.validation,\r\n            [name]: this.validation(name, value.toString())\r\n        };\r\n        validation.allField.errors = [];\r\n        const isValidForm = this.getValidationStatus(validation);\r\n        this.setState({...this.state, validation, item, isValidForm});\r\n    }\r\n\r\n    getValidationStatus(validation) {\r\n        return Object.values(validation)\r\n            .every(validField => !validField.errors.length);\r\n    }\r\n\r\n    /*async handleSubmit(event) {\r\n        const self = this;\r\n        event.preventDefault();\r\n        const {item} = this.state;\r\n        const userData = {\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n            email: item.email,\r\n            birthDate: item.birthDate\r\n        }\r\n\r\n        const endpoint = +item.id ? `/api/users?id=${item.id}` : '/api/users';\r\n\r\n        await fetch(endpoint, {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(userData),\r\n        }).then(response => {\r\n            if (![400, 500].includes(+response.status)) {\r\n                window.location.href = 'http://34.88.120.86:3000/users';\r\n                return null;\r\n            }\r\n            return response.text();\r\n        }).then(message => {\r\n            const validation = {...self.state.validation, allField: {errors: [message]}};\r\n            self.setState({...self.state, validation});\r\n        });\r\n    }*/\r\n\r\n    render() {\r\n        const {item, validation, isValidForm} = this.state;\r\n        const title = <h2>{item.id ? 'Edit User' : 'Add User'}</h2>;\r\n\r\n        return <div>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"firstName\">First Name</Label>\r\n                        <Input type=\"text\" name=\"firstName\" id=\"firstName\" value={''}\r\n                               onChange={this.updateInput} autoComplete=\"firstName\"/>\r\n                        {this.errorRender(validation.firstName)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"lastName\">Last Name</Label>\r\n                        <Input type=\"text\" name=\"lastName\" id=\"lastName\" value={item.lastName || ''}\r\n                               onChange={this.handleChange} autoComplete=\"lastName\"/>\r\n                        {this.errorRender(validation.lastName)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email</Label>\r\n                        <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\r\n                               onChange={this.handleChange} autoComplete=\"email\"/>\r\n                        {this.errorRender(validation.email)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"birthDate\">Birth Date</Label>\r\n                        <Input type=\"text\" name=\"birthDate\" id=\"birthDate\" value={item.birthDate || ''}\r\n                               onChange={this.handleChange} autoComplete=\"birthDate\"/>\r\n                        {this.errorRender(validation.birthDate)}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        {this.errorRender(validation.allField)}\r\n                        <Button color=\"primary\" type=\"submit\" onClick={this.handleChange} >Save</Button>{' '}\r\n                        <Button color=\"secondary\"  to=\"/users\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default UserForm;"]},"metadata":{},"sourceType":"module"}