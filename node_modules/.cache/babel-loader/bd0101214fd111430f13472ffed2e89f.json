{"ast":null,"code":"import { assert } from './assert';\nimport { EventEmitter } from './EventEmitter';\nimport { Field } from './Field';\nexport var FieldEvent;\n\n(function (FieldEvent) {\n  FieldEvent[\"Added\"] = \"FIELD_ADDED\";\n  FieldEvent[\"Removed\"] = \"FIELD_REMOVED\";\n})(FieldEvent || (FieldEvent = {}));\n\nexport class FieldsStore extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.fields = new Array();\n  }\n\n  getField(fieldName) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    return fields.length === 1 ? fields[0] : undefined;\n  }\n\n  addField(fieldName) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    assert(fields.length === 0 || fields.length === 1, `Cannot have more than 1 field matching '${fieldName}'`);\n\n    if (fields.length === 0) {\n      const newField = new Field(fieldName);\n      this.fields.push(newField);\n      this.emitSync(FieldEvent.Added, newField);\n    } else {}\n  }\n\n  removeField(fieldName) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    const index = this.fields.indexOf(fields[0]);\n\n    if (index > -1) {\n      this.fields.splice(index, 1);\n      this.emitSync(FieldEvent.Removed, fieldName);\n    }\n  }\n\n  isValid() {\n    return this.fields.every(field => field.isValid());\n  }\n\n  hasFeedbacks() {\n    return this.fields.some(field => field.hasFeedbacks());\n  }\n\n}","map":{"version":3,"sources":["../src/FieldsStore.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,KAAT,QAAsB,SAAtB;AAEA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AACpB,EAAA,UAAA,CAAA,OAAA,CAAA,GAAA,aAAA;AACA,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,eAAA;AACD,CAHD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB;;AAKA,OAAM,MAAO,WAAP,SAA2B,YAA3B,CAA+D;AAArE,EAAA,WAAA,GAAA;;AACW,SAAA,MAAA,GAAS,IAAI,KAAJ,EAAT;AA+CV;;AA7CC,EAAA,QAAQ,CAAC,SAAD,EAAkB;AACxB,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAM,IAAI,MAAM,CAAC,IAAP,KAAgB,SAA7C,CAAf;AAEA,WAAO,MAAM,CAAC,MAAP,KAAkB,CAAlB,GAAsB,MAAM,CAAC,CAAD,CAA5B,GAAkC,SAAzC;AACD;;AAED,EAAA,QAAQ,CAAC,SAAD,EAAkB;AACxB,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAM,IAAI,MAAM,CAAC,IAAP,KAAgB,SAA7C,CAAf;AACA,IAAA,MAAM,CACJ,MAAM,CAAC,MAAP,KAAkB,CAAlB,IAAuB,MAAM,CAAC,MAAP,KAAkB,CADrC,EAEJ,2CAA2C,SAAS,GAFhD,CAAN;;AAKA,QAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAM,QAAQ,GAAG,IAAI,KAAJ,CAAU,SAAV,CAAjB;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,QAAjB;AACA,WAAK,QAAL,CAAc,UAAU,CAAC,KAAzB,EAAgC,QAAhC;AACD,KAJD,MAIO,CAGN;AACF;;AAED,EAAA,WAAW,CAAC,SAAD,EAAkB;AAE3B,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAM,IAAI,MAAM,CAAC,IAAP,KAAgB,SAA7C,CAAf;AAMA,UAAM,KAAK,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,MAAM,CAAC,CAAD,CAA1B,CAAd;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,WAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B;AACA,WAAK,QAAL,CAAc,UAAU,CAAC,OAAzB,EAAkC,SAAlC;AACD;AACF;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,IAAI,KAAK,CAAC,OAAN,EAA3B,CAAP;AACD;;AAED,EAAA,YAAY,GAAA;AACV,WAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,IAAI,KAAK,CAAC,YAAN,EAA1B,CAAP;AACD;;AA/CkE","sourcesContent":["import { assert } from './assert';\nimport { EventEmitter } from './EventEmitter';\nimport { Field } from './Field';\n\nexport enum FieldEvent {\n  Added = 'FIELD_ADDED',\n  Removed = 'FIELD_REMOVED'\n}\n\nexport class FieldsStore extends EventEmitter<[Field | string], void> {\n  readonly fields = new Array<Field>();\n\n  getField(fieldName: string) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    //assert(fields.length === 1, `Unknown field '${fieldName}'`);\n    return fields.length === 1 ? fields[0] : undefined;\n  }\n\n  addField(fieldName: string) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    assert(\n      fields.length === 0 || fields.length === 1,\n      `Cannot have more than 1 field matching '${fieldName}'`\n    );\n\n    if (fields.length === 0) {\n      const newField = new Field(fieldName);\n      this.fields.push(newField);\n      this.emitSync(FieldEvent.Added, newField);\n    } else {\n      // We can have multiple FieldFeedbacks for the same field,\n      // thus addField() can be called multiple times\n    }\n  }\n\n  removeField(fieldName: string) {\n    // eslint-disable-next-line unicorn/prefer-array-find\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n\n    // We can have multiple FieldFeedbacks for the same field,\n    // thus removeField() can be called multiple times\n    //assert(fields.length === 1, `Unknown field '${fieldName}'`);\n\n    const index = this.fields.indexOf(fields[0]);\n    if (index > -1) {\n      this.fields.splice(index, 1);\n      this.emitSync(FieldEvent.Removed, fieldName);\n    }\n  }\n\n  isValid() {\n    return this.fields.every(field => field.isValid());\n  }\n\n  hasFeedbacks() {\n    return this.fields.some(field => field.hasFeedbacks());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}