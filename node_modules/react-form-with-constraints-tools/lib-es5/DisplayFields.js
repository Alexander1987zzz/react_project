"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Async = exports.FieldFeedback = exports.FieldFeedbacks = exports.FormWithConstraints = exports.DisplayFields = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var react_form_with_constraints_1 = require("react-form-with-constraints");
Object.defineProperty(exports, "FormWithConstraints", { enumerable: true, get: function () { return react_form_with_constraints_1.FormWithConstraints; } });
function beautifulStringify(obj, space) {
    var str = JSON.stringify(obj, function (_key, value) { return (value === undefined ? '__undefined__' : value); }, space);
    str = str.replace(/"__undefined__"/g, 'undefined');
    str = str.replace(/"([^"]+)":/g, '$1:');
    str = str.replace(/: "(.*[\\"].*)",/g, ': $1,');
    str = str.replace(/\\"/g, '"');
    return str;
}
function normalizeFieldElementProperty(fields) {
    return fields.map(function (field) {
        var element = field.element, otherProps = __rest(field, ["element"]);
        return element
            ? __assign({ element: react_form_with_constraints_1.isHTMLInput(element) ? element.outerHTML : element.props }, otherProps) : field;
    });
}
var DisplayFields = (function (_super) {
    __extends(DisplayFields, _super);
    function DisplayFields() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.reRender = function () {
            _this.forceUpdate();
        };
        return _this;
    }
    DisplayFields.prototype.componentDidMount = function () {
        this.context.form.fieldsStore.addListener(react_form_with_constraints_1.FieldEvent.Added, this.reRender);
        this.context.form.fieldsStore.addListener(react_form_with_constraints_1.FieldEvent.Removed, this.reRender);
        this.context.form.addFieldDidValidateEventListener(this.reRender);
        this.context.form.addFieldDidResetEventListener(this.reRender);
    };
    DisplayFields.prototype.componentWillUnmount = function () {
        this.context.form.fieldsStore.removeListener(react_form_with_constraints_1.FieldEvent.Added, this.reRender);
        this.context.form.fieldsStore.removeListener(react_form_with_constraints_1.FieldEvent.Removed, this.reRender);
        this.context.form.removeFieldDidValidateEventListener(this.reRender);
        this.context.form.removeFieldDidResetEventListener(this.reRender);
    };
    DisplayFields.prototype.render = function () {
        var str = beautifulStringify(normalizeFieldElementProperty(this.context.form.fieldsStore.fields), 2);
        str = str.replace(/{\s+key: (.*),\s+type: (.*),\s+show: (.*)\s+}/g, '{ key: $1, type: $2, show: $3 }');
        return str;
    };
    DisplayFields.contextTypes = {
        form: PropTypes.instanceOf(react_form_with_constraints_1.FormWithConstraints).isRequired
    };
    return DisplayFields;
}(React.Component));
exports.DisplayFields = DisplayFields;
var FieldFeedbacks = (function (_super) {
    __extends(FieldFeedbacks, _super);
    function FieldFeedbacks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldFeedbacks.prototype.render = function () {
        var _a = this.props, fieldName = _a.for, stop = _a.stop;
        var attr = '';
        if (fieldName)
            attr += "for=\"" + fieldName + "\" ";
        attr += "stop=\"" + stop + "\"";
        return (React.createElement(React.Fragment, null,
            React.createElement("li", null,
                "key=\"",
                this.key,
                "\" ",
                attr),
            React.createElement("ul", null, _super.prototype.render.call(this))));
    };
    return FieldFeedbacks;
}(react_form_with_constraints_1.FieldFeedbacks));
exports.FieldFeedbacks = FieldFeedbacks;
var FieldFeedback = (function (_super) {
    __extends(FieldFeedback, _super);
    function FieldFeedback() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rootEl = null;
        return _this;
    }
    FieldFeedback.prototype.getTextDecoration = function () {
        var show = this.state.validation.show;
        var textDecoration = '';
        switch (show) {
            case false:
                textDecoration = 'line-through';
                break;
            case undefined:
                textDecoration = 'line-through dotted';
                break;
            default:
                textDecoration = '';
        }
        return textDecoration;
    };
    FieldFeedback.prototype.render = function () {
        var _this = this;
        var _a = this.state.validation, key = _a.key, type = _a.type;
        return (React.createElement("li", { ref: function (rootEl) { return (_this.rootEl = rootEl); } },
            React.createElement("span", { style: { textDecoration: this.getTextDecoration() } },
                "key=\"",
                key,
                "\" type=\"",
                type,
                "\""),
            ' ',
            _super.prototype.render.call(this)));
    };
    FieldFeedback.prototype.componentDidUpdate = function () {
        var fieldFeedbackSpans = this.rootEl.querySelectorAll('[data-feedback]');
        fieldFeedbackSpans.forEach(function (fieldFeedbackSpan) {
            fieldFeedbackSpan.style.display = 'inline';
        });
        var li = this.rootEl.closest('li.async');
        if (li !== null) {
            var async = li.querySelector('span[style]');
            async.style.textDecoration = this.getTextDecoration();
        }
        var type = this.state.validation.type;
        if (type === react_form_with_constraints_1.FieldFeedbackType.WhenValid) {
            var span = this.rootEl.querySelector('span[style]');
            var whenValid = this.rootEl.querySelector("span." + this.props.classes.valid);
            span.style.textDecoration = whenValid !== null ? '' : 'line-through';
        }
    };
    return FieldFeedback;
}(react_form_with_constraints_1.FieldFeedback));
exports.FieldFeedback = FieldFeedback;
var Async = (function (_super) {
    __extends(Async, _super);
    function Async() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rootEl = null;
        return _this;
    }
    Async.getTextDecoration = function () {
        return 'line-through dotted';
    };
    Async.prototype.componentDidUpdate = function () {
        var async = this.rootEl.querySelector('span[style]');
        async.style.textDecoration = Async.getTextDecoration();
    };
    Async.prototype.render = function () {
        var _this = this;
        return (React.createElement("li", { className: "async", ref: function (rootEl) { return (_this.rootEl = rootEl); } },
            React.createElement("span", { style: { textDecoration: Async.getTextDecoration() } }, "Async"),
            React.createElement("ul", null, _super.prototype.render.call(this))));
    };
    return Async;
}(react_form_with_constraints_1.Async));
exports.Async = Async;
//# sourceMappingURL=DisplayFields.js.map